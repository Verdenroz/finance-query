{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"FinanceQuery <p>FinanceQuery is a modern web framework for building financial APIs with Python based on FastAPI and standard Python type hints.</p> <p>The key features are:</p> <ul> <li>Fast: Very high performance, on par with NodeJS and Go (thanks to FastAPI and Starlette). One of the fastest   Python frameworks available for financial data.</li> <li>Robust: Get production-ready code. With automatic interactive documentation.</li> <li>Standards-based: Based on (and fully compatible with) the open standards for APIs: OpenAPI and JSON Schema.</li> </ul> <p>Free &amp; Open Source</p> <p>FinanceQuery is completely free and open-source. No hidden fees, no rate limits on your own deployment. Built by developers, for developers.</p> <p>Production Ready</p> <p>Deploy to AWS Lambda, Render, or any cloud provider. Includes Docker support, automatic documentation, and comprehensive testing.</p> <p>Real-Time Data</p> <p>Get live stock quotes, market data, and financial news through WebSocket connections and REST APIs. Perfect for trading applications and financial dashboards.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>For requirements, installation instructions and quick start guide, see Getting Started.</p>"},{"location":"#interactive-api-documentation","title":"Interactive API Documentation","text":"<p>For a live interactive API documentation with demo requests, visit Scalar FinanceQuery.</p>"},{"location":"#example-usage","title":"Example Usage","text":"<p>A demo API is ready to use out of the box. Here's how to get stock data:</p>"},{"location":"#rest-api-example","title":"REST API Example","text":"<pre><code># Get detailed quote for NVIDIA stock\ncurl -X GET 'https://finance-query.onrender.com/v1/quotes?symbols=nvda' \\\n  -H 'x-api-key: your-api-key'\n</code></pre>"},{"location":"#response","title":"Response","text":"<pre><code>[\n  {\n    \"symbol\": \"NVDA\",\n    \"name\": \"NVIDIA Corporation\",\n    \"price\": \"120.15\",\n    \"change\": \"-11.13\",\n    \"percentChange\": \"-8.48%\",\n    \"marketCap\": \"2.94T\",\n    \"sector\": \"Technology\",\n    \"industry\": \"Semiconductors\"\n  }\n]\n</code></pre>"},{"location":"#websocket-real-time-updates","title":"WebSocket Real-Time Updates","text":"<pre><code>// Connect to WebSocket for real-time updates\nconst ws = new WebSocket('wss://finance-query.onrender.com/quotes');\n\nws.onopen = () =&gt; {\n    console.log('Connected to FinanceQuery WebSocket');\n    ws.send('TSLA'); // Subscribe to Tesla updates\n};\n\nws.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    console.log('Real-time update:', data);\n};\n</code></pre>"},{"location":"#what-you-get","title":"What You Get","text":"<p>In summary, you declare your financial data needs once, and FinanceQuery provides:</p> <ul> <li> <p>\u2705 Data validation:</p> <ul> <li>Automatic and clear errors when requests are invalid</li> <li>Validation for stock symbols, date ranges, and parameters</li> <li>Support for complex nested financial data structures</li> </ul> </li> <li> <p>\u2705 Multiple data sources:</p> <ul> <li>Yahoo Finance integration</li> <li>Web scraping for additional data points and fallbacks</li> <li>Real-time and historical data support</li> </ul> </li> <li> <p>\u2705 Performance optimizations:</p> <ul> <li>Cython-accelerated technical indicators</li> <li>Redis caching for frequently requested data</li> <li>Efficient data processing and serialization</li> </ul> </li> <li> <p>\u2705 Production features:</p> <ul> <li>Rate limiting and API key management</li> <li>Proxy support for reliable data fetching</li> <li>Docker containerization</li> <li>Cloud deployment ready (AWS Lambda, Render)</li> </ul> </li> </ul>"},{"location":"#available-rest-endpoints","title":"Available REST Endpoints","text":"Endpoint Description <code>/health</code>, <code>/ping</code> API status and health monitoring <code>/hours</code> Trading hours and market status <code>/v1/quotes</code> Detailed quotes and information <code>/v1/simple-quotes</code> Simplified quotes with summary information <code>/v1/similar</code> Find similar quotes to queried symbol <code>/v1/historical</code> Historical price data with customizable ranges <code>/v1/movers</code> Market gainers, losers, and most active stocks <code>/v1/news</code> Financial news and market updates <code>/v1/indices</code> Major market indices (S&amp;P 500, NASDAQ, DOW) <code>/v1/sectors</code> Market sector performance and analysis <code>/v1/search</code> Search for securities with filters <code>/v1/indicator</code> Get specific indicator history over time <code>/v1/indicators</code> Technical indicators summary for interval <code>/v1/stream</code> SSE for real-time quote updates"},{"location":"#available-websocket-endpoints","title":"Available WebSocket Endpoints","text":"Endpoint Description <code>/quotes</code> Real-time quotes updates <code>/profile</code> Real-time detailed ticker updates (quote, news, similar) <code>/market</code> Real-time market updates (indices, news, movers, sectors) <code>/hours</code> Real-time market hour updates"},{"location":"#deployment-options","title":"Deployment Options","text":"<p>Multiple Deployment Options</p> AWS LambdaRenderDocker <p>Perfect for serverless applications with automatic scaling: <pre><code># Use the provided AWS deployment workflow\n# Add AWS_SECRET_ID and AWS_SECRET_KEY to repository secrets\n</code></pre></p> <p>Easy deployment with WebSocket support: <pre><code># Deploy using the Render workflow\n# Add RENDER_DEPLOY_HOOK_URL to repository secrets\n</code></pre></p> <p>Deploy anywhere with Docker: <pre><code>docker build -t financequery .\ndocker run -p 8000:8000 financequery\n</code></pre></p>"},{"location":"#configuration","title":"Configuration","text":"<p>Customize FinanceQuery with environment variables:</p> <p>These environment variables are optional. The API will function with default settings if not provided.</p> <p>Security Configuration</p> <pre><code>USE_SECURITY=true\nADMIN_API_KEY=your-secret-admin-key\n</code></pre> <p>Proxy Configuration</p> <pre><code>USE_PROXY=true\nPROXY_URL=your-proxy-url\nPROXY_TOKEN=your-proxy-token\n</code></pre> <p>Redis Caching</p> <pre><code>REDIS_URL=redis://localhost:6379\n</code></pre> <p>Algolia Search</p> <pre><code>ALGOLIA_APP_ID=your-algolia-app-id\nALGOLIA_API_KEY=your-algolia-api-key\n</code></pre>"},{"location":"#performance","title":"Performance","text":"<p>FinanceQuery leverages:</p> <ul> <li>FastAPI for lightning-fast HTTP performance</li> <li>fastapi-injectable for efficient dependency injection</li> <li>curl_cffi for async browser curl impersonation</li> <li>lxml for fast and reliable web scraping</li> <li>Cython for accelerated technical indicator calculations</li> <li>Redis for intelligent caching of market data</li> <li>logo.dev for fetching stock logos</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT License.</p>"},{"location":"#support-feedback","title":"Support &amp; Feedback","text":"<p>Need Help?</p> <ul> <li>\ud83d\udce7 Email: harveytseng2@gmail.com</li> <li>\ud83d\udc1b Issues: GitHub Issues</li> <li>\ud83d\udcd6 Documentation: OpenAPI Documentation</li> </ul> <p>As most data is scraped, some endpoints may break. If something is not working or if you have any suggestions, please reach out!</p>"},{"location":"deployment/","title":"Deployment Options","text":"<p>This document outlines various ways to deploy the FinanceQuery API service. This only covers Docker, AWS Lambda, and Render deployments, but the service can also be deployed on any platform that supports Python and FastAPI.</p>"},{"location":"deployment/#dependencies","title":"Dependencies","text":"<p>For the full list of dependencies, see <code>requirements.txt</code> in the project root.</p>"},{"location":"deployment/#docker-deployment","title":"Docker Deployment","text":"<p>Docker provides a straightforward way to self-host the FinanceQuery server. A Dockerfile is included in the repository that installs all dependencies and cythonizes project files for optimal performance.</p>"},{"location":"deployment/#build-the-docker-image","title":"Build the Docker Image","text":"<pre><code>docker build -t finance-query .\n</code></pre>"},{"location":"deployment/#run-the-docker-container","title":"Run the Docker Container","text":"<pre><code>docker run -p 8000:8000 finance-query\n</code></pre> <p>FinanceQuery will now be available on port 8000 at <code>http://localhost:8000</code>.</p>"},{"location":"deployment/#aws-lambda-deployment","title":"AWS Lambda Deployment","text":""},{"location":"deployment/#manual-deployment","title":"Manual Deployment","text":"<ol> <li>Follow the AWS Lambda Deployment Guide.</li> <li>Remember to add the necessary environment variables to the Lambda function.</li> </ol>"},{"location":"deployment/#automated-deployment-workflow","title":"Automated Deployment Workflow","text":"<p>You can use the AWS Deployment Workflow from the repository:</p> <ol> <li>Provide repository secrets for:</li> <li><code>AWS_SECRET_ID</code></li> <li> <p><code>AWS_SECRET_KEY</code></p> </li> <li> <p>Edit the following values in the workflow file:</p> </li> <li><code>AWS_REGION</code></li> <li><code>ECR_REPOSITORY</code></li> <li><code>FUNCTION_NAME</code></li> </ol>"},{"location":"deployment/#render-deployment","title":"Render Deployment","text":""},{"location":"deployment/#manual-deployment_1","title":"Manual Deployment","text":"<ol> <li>Follow the Render Deployment Guide.</li> <li>The deployment should use the Dockerfile included in the repository.</li> <li>Be sure to override the CMD in the Dockerfile in your Render project settings to:    <pre><code>python -m uvicorn src.main:app --host 0.0.0.0 --port $PORT\n</code></pre></li> </ol>"},{"location":"deployment/#automated-deployment-workflow_1","title":"Automated Deployment Workflow","text":"<p>You can use the Render Deployment Workflow from the repository:</p> <ol> <li>Provide the repository secret:</li> <li> <p><code>RENDER_DEPLOY_HOOK_URL</code></p> </li> <li> <p>The deploy hook URL can be found in the settings of your Render project.</p> </li> </ol>"},{"location":"getting-started/","title":"Getting Started with FinanceQuery","text":"<p>This guide will help you set up and run FinanceQuery on your system.</p>"},{"location":"getting-started/#requirements","title":"Requirements","text":"<p>Before getting started with FinanceQuery, ensure your system meets the following requirements:</p>"},{"location":"getting-started/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.11 or higher (Python 3.12 recommended)</li> <li>Operating System: Linux, macOS, or Windows</li> <li>Memory: Minimum 512MB RAM (1GB+ recommended for production)</li> </ul> <p>FinanceQuery requires several system-level dependencies for optimal performance:</p> Linux (Ubuntu/Debian)macOSWindows <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y \\\n    ca-certificates \\\n    libkrb5-dev \\\n    libicu-dev \\\n    zlib1g-dev \\\n    openssl \\\n    gcc \\\n    python3-dev\n</code></pre> <pre><code># Using Homebrew\nbrew install openssl krb5 icu4c\n</code></pre> <pre><code># Required components\n- Visual Studio Build Tools or Visual Studio Community (for C++ compilation)\n- OpenSSL (typically included with Python installation)\n</code></pre>"},{"location":"getting-started/#dependency-management","title":"Dependency Management","text":"<p>FinanceQuery uses Poetry for dependency management. A <code>requirements.txt</code> file is also provided for environments where Poetry isn't available.</p> <pre><code># Using Poetry (recommended)\npoetry install\n\n# Using pip\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/#optional-requirements","title":"Optional Requirements","text":""},{"location":"getting-started/#redis-recommended-for-production","title":"Redis (Recommended for Production)","text":"<ul> <li>Redis server for caching and improved performance</li> <li>Installation: Redis Quick Start Guide</li> </ul>"},{"location":"getting-started/#proxy-support-optional","title":"Proxy Support (Optional)","text":"<ul> <li>For enhanced data fetching reliability in production environments</li> <li>Configure via environment variables (see Configuration section)</li> </ul>"},{"location":"getting-started/#quick-start","title":"Quick Start","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Create and activate a virtual environment and then install the dependencies:</p> <pre><code># Clone the project\ngit clone https://github.com/Verdenroz/finance-query.git\ncd finance-query\n\n# Install dependencies\npoetry install\n\n# Cythonize files for performance\npython setup.py build_ext --inplace\n\n# Start the server\nuvicorn src.main:app --reload\n</code></pre>"},{"location":"getting-started/#testing-the-api","title":"Testing the API","text":"<p>Once the server is running, you can access:</p> <ul> <li>API Documentation: http://localhost:8000/docs</li> <li>Alternative Documentation: http://localhost:8000/redoc</li> </ul>"},{"location":"getting-started/#making-your-first-request","title":"Making Your First Request","text":"<p>Try getting stock information using curl:</p> <pre><code>curl -X GET \"http://localhost:8000/v1/simple-quotes?symbols=AAPL\"\n</code></pre> <p>Or using Python:</p> <pre><code>import requests\n\nresponse = requests.get(\"http://localhost:8000/v1/simple-quotes\", params={\"symbols\": \"AAPL\"})\nprint(response.json())\n</code></pre>"},{"location":"websockets/","title":"WebSockets","text":"<p>Finance Query provides real-time financial data through WebSocket connections. All WebSocket endpoints automatically refresh data every 5 seconds and support both individual connections and Redis-based pub/sub scaling.</p>"},{"location":"websockets/#available-websocket-routes","title":"Available WebSocket Routes","text":"<p>Finance Query currently implements four WebSocket endpoints:</p> <ul> <li>Profile - Stream comprehensive data for a single symbol including quotes, similar stocks, sector performance, and news</li> <li>Quotes - Stream simple quote data for multiple symbols simultaneously  </li> <li>Market - Stream market overview including movers, indices, news, and sector performances</li> <li>Hours - Stream current market status (open, closed, pre-market, after-hours)</li> </ul>"},{"location":"websockets/#connection-requirements","title":"Connection Requirements","text":""},{"location":"websockets/#authentication","title":"Authentication","text":"<p>All WebSocket connections require validation if the <code>USE_SECURITY</code> environment variable is set to <code>True</code>. This ensures that only authenticated users can access the data streams.</p>"},{"location":"websockets/#url-format","title":"URL Format","text":"<p>WebSocket URLs follow this pattern:</p> <ul> <li>Production/HTTPS: <code>wss://your-domain.com/{endpoint}</code></li> <li>Local Development: <code>ws://localhost:8000/{endpoint}</code></li> </ul>"},{"location":"websockets/#deployment-considerations","title":"Deployment Considerations","text":""},{"location":"websockets/#aws-lambda-limitations","title":"AWS Lambda Limitations","text":"<p>WebSockets are not supported when deploying Finance Query to AWS Lambda due to Lambda's stateless nature and lack of persistent connections.</p>"},{"location":"websockets/#recommended-deployment","title":"Recommended Deployment","text":"<p>For full WebSocket functionality, deploy to platforms that support persistent connections:</p> <ul> <li>Render (recommended)</li> <li>Railway</li> <li>Fly.io</li> <li>DigitalOcean App Platform</li> <li>Traditional VPS/servers</li> </ul>"},{"location":"websockets/#connection-management","title":"Connection Management","text":""},{"location":"websockets/#redis-scaling","title":"Redis Scaling","text":"<p>Finance Query supports Redis-based connection management for horizontal scaling:</p> <ul> <li>Multiple server instances can share WebSocket state</li> <li>Pub/sub mechanism ensures all connected clients receive updates</li> <li>Automatic fallback to in-memory management if Redis is unavailable</li> </ul>"},{"location":"websockets/#connection-lifecycle","title":"Connection Lifecycle","text":"<ol> <li>Validation - Each connection is validated before acceptance (if <code>USE_SECURITY</code> is <code>True</code>)</li> <li>Initial Data - Immediate data fetch and send upon connection</li> <li>Periodic Updates - Data refreshed every 5 seconds</li> <li>Graceful Disconnection - Proper cleanup on client disconnect</li> </ol>"},{"location":"websockets/#error-handling","title":"Error Handling","text":"<ul> <li>Invalid authentication results in connection rejection</li> <li>Failed data fetches don't terminate the connection</li> <li>Default null values provided for failed operations</li> </ul>"},{"location":"websockets/#connection-management_1","title":"Connection Management","text":""},{"location":"websockets/#channel-naming","title":"Channel Naming","text":"<ul> <li>Connection Pooling: Multiple clients may share data channel</li> <li>Redis Support: Horizontal scaling via Redis pub/sub</li> </ul>"},{"location":"websockets/#connection-sharing","title":"Connection Sharing","text":"<ul> <li>Reduces server load for popular symbol combinations</li> <li>Redis pub/sub enables scaling across multiple server instances</li> </ul>"},{"location":"websockets/#getting-started","title":"Getting Started","text":"<ol> <li>Choose your endpoint based on data requirements</li> <li>Establish connection using appropriate URL format</li> <li>Handle initial data sent immediately upon connection</li> <li>Process periodic updates sent every 5 seconds</li> <li>Implement reconnection logic for production applications</li> </ol> <p>For detailed usage examples and response formats, see the individual endpoint documentation pages.</p>"},{"location":"api/health/","title":"Health Endpoints","text":""},{"location":"api/health/#get-v1health","title":"GET /v1/health","text":""},{"location":"api/health/#overview","title":"Overview","text":"<p>Purpose: Detailed health check of the API and its dependencies Response Format: JSON object with service statuses and metrics</p>"},{"location":"api/health/#authentication","title":"Authentication","text":"<p>None required</p> <p>Responses:</p> <ul> <li>200 OK<ul> <li>Content-Type: <code>application/json</code></li> <li>Example (200): <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-05-13T19:35:38.383240\",\n  \"redis\": {\n      \"status\": \"healthy\",\n      \"latency_ms\": 18.45\n  },\n  \"services\": {\n      \"status\": \"20/20 succeeded\",\n      \"Indices\": {\n          \"status\": \"succeeded\"\n      },\n      \"Market Actives\": {\n          \"status\": \"succeeded\"\n      },\n      \"Market Losers\": {\n          \"status\": \"succeeded\"\n      },\n      \"Market Gainers\": {\n          \"status\": \"succeeded\"\n      },\n      \"Market Sectors\": {\n          \"status\": \"succeeded\"\n      },\n      \"Sector for a symbol\": {\n          \"status\": \"succeeded\"\n      },\n      \"Detailed Sector\": {\n          \"status\": \"succeeded\"\n      },\n      \"General News\": {\n          \"status\": \"succeeded\"\n      },\n      \"News for equity\": {\n          \"status\": \"succeeded\"\n      },\n      \"News for ETF\": {\n          \"status\": \"succeeded\"\n      },\n      \"Full Quotes\": {\n          \"status\": \"succeeded\"\n      },\n      \"Simple Quotes\": {\n          \"status\": \"succeeded\"\n      },\n      \"Similar Equities\": {\n          \"status\": \"succeeded\"\n      },\n      \"Similar ETFs\": {\n          \"status\": \"succeeded\"\n      },\n      \"Historical day prices\": {\n          \"status\": \"succeeded\"\n      },\n      \"Historical month prices\": {\n          \"status\": \"succeeded\"\n      },\n      \"Historical year prices\": {\n          \"status\": \"succeeded\"\n      },\n      \"Historical five year prices\": {\n          \"status\": \"succeeded\"\n      },\n      \"Search\": {\n          \"status\": \"succeeded\"\n      },\n      \"Summary Analysis\": {\n          \"status\": \"succeeded\"\n      }\n  }\n}   \n</code></pre></li> </ul> </li> </ul>"},{"location":"api/health/#get-v1ping","title":"GET /v1/ping","text":""},{"location":"api/health/#overview_1","title":"Overview","text":"<p>Purpose: Simple connectivity check Response Format: Basic JSON health status with timestamp</p>"},{"location":"api/health/#authentication_1","title":"Authentication","text":"<p>None required</p>"},{"location":"api/health/#request-parameters","title":"Request Parameters","text":"<p>None</p> <p>Responses:</p> <ul> <li>200 OK<ul> <li>Content-Type: <code>application/json</code></li> <li>Example (200): <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2023-10-01T12:34:56.789Z\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/health/#schema-references","title":"Schema References","text":""},{"location":"api/health/#healthstatus-schema","title":"HealthStatus Schema","text":"Field Type Description Required status string Overall health status of the API \u2713 timestamp string ISO timestamp of the health check \u2713 redis object Redis service status and metrics services object Individual service statuses and checks"},{"location":"api/health/#pingstatus-schema","title":"PingStatus Schema","text":"Field Type Description Required status string Health status of the API \u2713 timestamp string ISO timestamp of the ping request \u2713"},{"location":"api/historical/","title":"Historical Prices","text":""},{"location":"api/historical/#get-v1historical","title":"GET /v1/historical","text":""},{"location":"api/historical/#overview","title":"Overview","text":"<p>Purpose: Historical stock price data retrieval Response Format: Time-series OHLCV (Open, High, Low, Close, Volume) data</p>"},{"location":"api/historical/#authentication","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/historical/#request-parameters","title":"Request Parameters","text":"Parameter Type Required Description Example <code>symbol</code> string \u2713 Stock ticker symbol <code>NVDA</code> <code>range</code> string \u2713 Historical time range <code>1y</code> <code>interval</code> string \u2713 Data point frequency <code>1d</code> <code>epoch</code> boolean Use epoch timestamps (default: false) <code>true</code>"},{"location":"api/historical/#available-range-options","title":"Available Range Options","text":"<p><code>1d</code>, <code>5d</code>, <code>1mo</code>, <code>3mo</code>, <code>6mo</code>, <code>ytd</code>, <code>1y</code>, <code>2y</code>, <code>5y</code>, <code>10y</code>, <code>max</code></p>"},{"location":"api/historical/#available-interval-options","title":"Available Interval Options","text":"<p><code>1m</code>, <code>5m</code>, <code>15m</code>, <code>30m</code>, <code>1h</code>, <code>1d</code>, <code>1wk</code>, <code>1mo</code></p> <p>Interval and Range Compatibility</p> Interval Compatible Ranges <code>1m</code> <code>1d</code>, <code>5d</code> only <code>5m</code> <code>1d</code>, <code>5d</code>, <code>1mo</code> only <code>15m</code> <code>1d</code>, <code>5d</code>, <code>1mo</code> only <code>30m</code> <code>1d</code>, <code>5d</code>, <code>1mo</code> only <code>1h</code> <code>1d</code>, <code>5d</code>, <code>1mo</code>, <code>3mo</code>, <code>6mo</code>, <code>ytd</code>, <code>1y</code> only <code>1mo</code> Required for <code>max</code> range <p>Attempting incompatible combinations will result in a 400 Bad Request error.</p> <p>Responses:</p> <ul> <li>200 OK </li> <li>Content-Type: <code>application/json</code> </li> <li>Schema: Object whose keys are dates (or epoch) and values are <code>HistoricalData</code> objects.  </li> <li> <p>Example (200): <pre><code>{\n  \"2023-10-01\": {\n    \"open\": 300.0,\n    \"high\": 305.0,\n    \"low\": 295.0,\n    \"close\": 302.0,\n    \"adjClose\": 302.0,\n    \"volume\": 1500000\n  },\n  \"2023-10-02\": {\n    \"open\": 302.0,\n    \"high\": 310.0,\n    \"low\": 300.0,\n    \"close\": 308.0,\n    \"adjClose\": 308.0,\n    \"volume\": 1600000\n  }\n}\n</code></pre></p> </li> <li> <p>400 Bad Request <pre><code>{ \"detail\": \"If interval is 1m, 5m, 15m or 30m, time period must be 1mo or less\" }\n</code></pre></p> </li> <li> <p>404 Not Found <pre><code>{ \"detail\": \"Symbol not found\" }\n</code></pre></p> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": {\n    \"symbol\": [\"Field required\"],\n    \"range\": [\"Field required\"],\n    \"interval\": [\"Field required\"]\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/historical/#schema-references","title":"Schema References","text":""},{"location":"api/historical/#historicaldata-schema","title":"HistoricalData Schema","text":"Field Type Description Required <code>open</code> number Opening price \u2713 <code>high</code> number Highest price \u2713 <code>low</code> number Lowest price \u2713 <code>close</code> number Closing price \u2713 <code>adjClose</code> number Adjusted closing price <code>volume</code> integer Volume traded \u2713"},{"location":"api/hours/","title":"Market Hours","text":""},{"location":"api/hours/#get-v1hours","title":"GET /v1/hours","text":""},{"location":"api/hours/#overview","title":"Overview","text":"<p>Purpose: Retrieve the current market status Response Format: JSON object with market status, reason, and timestamp</p>"},{"location":"api/hours/#authentication","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p> <p>Responses:</p> <ul> <li>200 OK<ul> <li>Content-Type: <code>application/json</code></li> <li>Example (200): <pre><code>{\n  \"status\": \"open\",\n  \"reason\": \"Regular trading hours.\",\n  \"timestamp\": \"2021-09-22T14:00:00.000Z\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/hours/#schema-references","title":"Schema References","text":""},{"location":"api/hours/#marketstatus-schema","title":"MarketStatus Schema","text":"Field Type Description Required status string Current market status (\"open\", \"closed\", etc.) \u2713 reason string Explanation for the current status \u2713 timestamp string ISO timestamp of the status check \u2713"},{"location":"api/indicators/","title":"Technical Indicators","text":""},{"location":"api/indicators/#get-v1indicator","title":"GET /v1/indicator","text":""},{"location":"api/indicators/#overview","title":"Overview","text":"<p>Purpose: Retrieve historical technical indicator data for a specific stock Response Format: Time series data for the requested technical indicator with historical values</p>"},{"location":"api/indicators/#authentication","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/indicators/#request-parameters","title":"Request Parameters","text":"Parameter Type Required Description Example <code>function</code> string \u2713 Technical indicator to fetch <code>SMA</code> <code>symbol</code> string \u2713 Stock symbol <code>NVDA</code> <code>range</code> string Time range for historical data (default: 2y) <code>1y</code> <code>interval</code> string Interval between data points (default: 1d) <code>1d</code> <code>epoch</code> boolean Return timestamps as epoch (default: false) <code>true</code> <code>lookBackPeriod</code> integer Look-back period for indicators <code>14</code> <code>stochPeriod</code> integer Stochastic look-back period <code>14</code> <code>signalPeriod</code> integer Signal period <code>9</code> <code>smooth</code> integer Smoothing period <code>3</code> <code>fastPeriod</code> integer Fast period (for MACD) <code>12</code> <code>slowPeriod</code> integer Slow period (for MACD) <code>26</code> <code>stdDev</code> integer Standard deviation (for BBANDS) <code>2</code> <code>smaPeriods</code> integer SMA look-back (for OBV) <code>20</code> <code>multiplier</code> integer Multiplier (for SUPERTREND) <code>3</code> <code>tenkanPeriod</code> integer Tenkan look-back (for ICHIMOKU) <code>9</code> <code>kijunPeriod</code> integer Kijun look-back (for ICHIMOKU) <code>26</code> <code>senkouPeriod</code> integer Senkou look-back (for ICHIMOKU) <code>52</code>"},{"location":"api/indicators/#valid-function-values","title":"Valid function values","text":"<p><code>SMA</code>, <code>EMA</code>, <code>WMA</code>, <code>VWMA</code>, <code>RSI</code>, <code>SRSI</code>, <code>STOCH</code>, <code>CCI</code>, <code>OBV</code>, <code>BBANDS</code>, <code>AROON</code>, <code>ADX</code>, <code>MACD</code>, <code>SUPERTREND</code>, <code>ICHIMOKU</code></p>"},{"location":"api/indicators/#available-range-options","title":"Available Range Options","text":"<p><code>1d</code>, <code>5d</code>, <code>1mo</code>, <code>3mo</code>, <code>6mo</code>, <code>ytd</code>, <code>1y</code>, <code>2y</code>, <code>5y</code>, <code>10y</code>, <code>max</code></p>"},{"location":"api/indicators/#available-interval-options","title":"Available Interval Options","text":"<p><code>1m</code>, <code>5m</code>, <code>15m</code>, <code>30m</code>, <code>1h</code>, <code>1d</code>, <code>1wk</code>, <code>1mo</code></p> <p>Interval and Range Compatibility</p> Interval Compatible Ranges <code>1m</code> <code>1d</code>, <code>5d</code> only <code>5m</code> <code>1d</code>, <code>5d</code>, <code>1mo</code> only <code>15m</code> <code>1d</code>, <code>5d</code>, <code>1mo</code> only <code>30m</code> <code>1d</code>, <code>5d</code>, <code>1mo</code> only <code>1h</code> <code>1d</code>, <code>5d</code>, <code>1mo</code>, <code>3mo</code>, <code>6mo</code>, <code>ytd</code>, <code>1y</code> only <code>1mo</code> Required for <code>max</code> range <p>Attempting incompatible combinations will result in a 400 Bad Request error.</p> <p>Responses:</p> <ul> <li> <p>200 OK</p> <ul> <li>Content-Type: <code>application/json</code></li> <li>Schema: <code>TechnicalIndicator</code> object</li> <li>Example (200): <pre><code>{\n  \"type\": \"SMA\",\n  \"Technical Analysis\": {\n    \"2021-07-09\": { \"value\": 30.0 },\n    \"2021-07-10\": { \"value\": 31.5 }\n  }\n}\n</code></pre></li> </ul> </li> <li> <p>400 Bad Request <pre><code>{ \"detail\": \"Invalid parameter: {parameter} for the {function} function.\" }\n</code></pre></p> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": {\n    \"function\": [\n      \"Field required\",\n      \"Input should be 'SMA', 'EMA', 'WMA', 'VWMA', 'RSI', 'SRSI', 'STOCH', 'CCI', 'OBV', 'BBANDS', 'AROON', 'ADX', 'MACD', 'SUPERTREND' or 'ICHIMOKU'\"\n    ],\n    \"symbol\": [\"Field required\"],\n    \"interval\": [\"Input should be '1m', '5m', '15m', '30m', '1h', '1d', '1wk', or '1mo'\"],\n    \"period\": [\"Input should be a valid integer, unable to parse string as an integer\"],\n    \"stoch_period\": [\"Input should be a valid integer, unable to parse string as an integer\"],\n    \"signal_period\": [\"Input should be a valid integer, unable to parse string as an integer\"],\n    \"smooth\": [\"Input should be a valid integer, unable to parse string as an integer\"],\n    \"fast_period\": [\"Input should be a valid integer, unable to parse string as an integer\"],\n    \"slow_period\": [\"Input should be a valid integer, unable to parse string as an integer\"],\n    \"std_dev\": [\"Input should be a valid integer, unable to parse string as an integer\"],\n    \"sma_periods\": [\"Input should be a valid integer, unable to parse string as an integer\"],\n    \"multiplier\": [\"Input should be a valid integer, unable to parse string as an integer\"],\n    \"tenkan_period\": [\"Input should be a valid integer, unable to parse string as an integer\"],\n    \"kijun_period\": [\"Input should be a valid integer, unable to parse string as an integer\"],\n    \"senkou_period\": [\"Input should be a valid integer, unable to parse string as an integer\"]\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/indicators/#get-v1indicators","title":"GET /v1/indicators","text":""},{"location":"api/indicators/#overview_1","title":"Overview","text":"<p>Purpose: Retrieve latest values for multiple technical indicators for a specific stock Response Format: Current values for requested technical indicators with their parameters</p>"},{"location":"api/indicators/#authentication_1","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/indicators/#request-parameters_1","title":"Request Parameters","text":"Parameter Type Required Description Example <code>symbol</code> string \u2713 Stock symbol <code>NVDA</code> <code>interval</code> string Interval for historical data (default: 1d) <code>1d</code> <code>functions</code> string Comma-separated list of indicators <code>SMA,EMA,RSI</code>"},{"location":"api/indicators/#available-interval-options_1","title":"Available Interval Options","text":"<p><code>1m</code>, <code>5m</code>, <code>15m</code>, <code>30m</code>, <code>1h</code>, <code>1d</code>, <code>1wk</code>, <code>1mo</code></p> <p>Responses:</p> <ul> <li> <p>200 OK</p> <ul> <li>Content-Type: <code>application/json</code></li> <li>Example (200): <pre><code>{\n  \"SMA(10)\": {\n    \"SMA\": 129.03\n  },\n  \"SMA(20)\": {\n    \"SMA\": 131.08\n  },\n  \"SMA(50)\": {\n    \"SMA\": 134.95\n  },\n  \"SMA(100)\": {\n    \"SMA\": 135.54\n  },\n  \"SMA(200)\": {\n    \"SMA\": 124.78\n  },\n  \"EMA(10)\": {\n    \"EMA\": 131.93\n  },\n  \"EMA(20)\": {\n    \"EMA\": 131.64\n  },\n  \"EMA(50)\": {\n    \"EMA\": 133.51\n  },\n  \"EMA(100)\": {\n    \"EMA\": 131.7\n  },\n  \"EMA(200)\": {\n    \"EMA\": 120.76\n  },\n  \"WMA(10)\": {\n    \"WMA\": 125.72\n  },\n  \"WMA(20)\": {\n    \"WMA\": 132.3\n  },\n  \"WMA(50)\": {\n    \"WMA\": 136.83\n  },\n  \"WMA(100)\": {\n    \"WMA\": 135.32\n  },\n  \"WMA(200)\": {\n    \"WMA\": 118.59\n  },\n  \"VWMA(20)\": {\n    \"VWMA\": 128.17\n  },\n  \"RSI(14)\": {\n    \"RSI\": 56.56\n  },\n  \"SRSI(3,3,14,14)\": {\n    \"%K\": 92.79,\n    \"%D\": 81.77\n  },\n  \"STOCH %K(14,3,3)\": {\n    \"%K\": 81.25,\n    \"%D\": 67.41\n  },\n  \"CCI(20)\": {\n    \"CCI\": 63.36\n  },\n  \"BBANDS(20,2)\": {\n    \"Upper Band\": 149.81,\n    \"Middle Band\": 131.08,\n    \"Lower Band\": 112.35\n  },\n  \"Aroon(25)\": {\n    \"Aroon Up\": 40,\n    \"Aroon Down\": 64\n  },\n  \"ADX(14)\": {\n    \"ADX\": 14.43\n  },\n  \"MACD(12,26)\": {\n    \"MACD\": -0.53,\n    \"Signal\": -2.1\n  },\n  \"Super Trend\": {\n    \"Super Trend\": 140.25,\n    \"Trend\": \"DOWN\"\n  },\n  \"Ichimoku Cloud\": {\n    \"Conversion Line\": 127.97,\n    \"Base Line\": 130.99,\n    \"Lagging Span\": 138.85,\n    \"Leading Span A\": 141.74,\n    \"Leading Span B\": 140\n  }\n}\n</code></pre></li> </ul> </li> <li> <p>400 Bad Request <pre><code>{ \"detail\": \"Invalid parameter: {parameter} for the {function} function.\" }\n</code></pre></p> </li> <li> <p>404 Not Found <pre><code>{ \"detail\": \"Symbol not found\" }\n</code></pre></p> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": {\n    \"symbol\": [\"Field required\"],\n    \"interval\": [\"Input should be '1m', '5m', '15m', '30m', '1h', '1d', '1wk', or '1mo'\"]\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/indicators/#schema-references","title":"Schema References","text":""},{"location":"api/indicators/#technicalindicator-schema","title":"TechnicalIndicator Schema","text":"Field Type Description Required type string The technical indicator (e.g., \"SMA\") \u2713 Technical Analysis object Dates mapped to indicator values \u2713"},{"location":"api/indicators/#smadata-schema","title":"SMAData Schema","text":"Field Type Description Required value float Average price over a specified period, smoothing price action"},{"location":"api/indicators/#emadata-schema","title":"EMAData Schema","text":"Field Type Description Required value float Weighted average giving more importance to recent prices"},{"location":"api/indicators/#wmadata-schema","title":"WMAData Schema","text":"Field Type Description Required value float Average where recent prices carry more weight than older prices"},{"location":"api/indicators/#vwmadata-schema","title":"VWMAData Schema","text":"Field Type Description Required value float Price average weighted by volume, showing where most trading activity occurred"},{"location":"api/indicators/#rsidata-schema","title":"RSIData Schema","text":"Field Type Description Required value float Momentum oscillator (0-100) indicating overbought/oversold conditions"},{"location":"api/indicators/#srsidata-schema","title":"SRSIData Schema","text":"Field Type Description Required k float Fast stochastic line applied to RSI values d float Smoothed signal line of the stochastic RSI"},{"location":"api/indicators/#stochdata-schema","title":"STOCHData Schema","text":"Field Type Description Required k float Fast line showing current price position within recent range d float Smoothed signal line of the stochastic oscillator"},{"location":"api/indicators/#ccidata-schema","title":"CCIData Schema","text":"Field Type Description Required value float Measures price deviation from statistical average to spot extremes"},{"location":"api/indicators/#macddata-schema","title":"MACDData Schema","text":"Field Type Description Required value float Difference between fast and slow moving averages signal float Smoothed MACD line used for buy/sell signal generation"},{"location":"api/indicators/#adxdata-schema","title":"ADXData Schema","text":"Field Type Description Required value float Strength of price trend regardless of direction (0-100)"},{"location":"api/indicators/#aroondata-schema","title":"AROONData Schema","text":"Field Type Description Required aroon_up float Time since highest high within lookback period aroon_down float Time since lowest low within lookback period"},{"location":"api/indicators/#bbandsdata-schema","title":"BBANDSData Schema","text":"Field Type Description Required upper_band float Price ceiling based on standard deviations above SMA middle_band float Simple moving average serving as the centerline lower_band float Price floor based on standard deviations below SMA"},{"location":"api/indicators/#obvdata-schema","title":"OBVData Schema","text":"Field Type Description Required value float Running total of volume based on price direction (up/down days)"},{"location":"api/indicators/#supertrenddata-schema","title":"SuperTrendData Schema","text":"Field Type Description Required value float Dynamic support/resistance level based on ATR trend string Current market direction (\"up\", \"down\", \"neutral\") \u2713"},{"location":"api/indicators/#ichimokudata-schema","title":"IchimokuData Schema","text":"Field Type Description Required tenkan_sen float Conversion line - short-term momentum and support/resistance kijun_sen float Base line - medium-term momentum and major support/resistance chikou_span float Lagging span - current price plotted 26 periods back senkou_span_a float Leading span A - future support/resistance level senkou_span_b float Leading span B - future support/resistance level"},{"location":"api/indices/","title":"Indices","text":""},{"location":"api/indices/#get-v1indices","title":"GET /v1/indices","text":""},{"location":"api/indices/#overview","title":"Overview","text":"<p>Purpose: Get major world market indices performance Response Format: Array of market indices with performance metrics and returns</p>"},{"location":"api/indices/#authentication","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/indices/#request-parameters","title":"Request Parameters","text":"Parameter Type Required Description Example <code>index</code> array of strings Specific indices to include (returns all if omitted) <code>[\"snp\", \"djia\", \"nasdaq\", rut\"]</code> <code>region</code> string Filter indices by region <code>US</code>"},{"location":"api/indices/#available-region-options","title":"Available Region Options","text":"<p><code>US</code>, <code>NA</code>, <code>SA</code>, <code>EU</code>, <code>AS</code>, <code>AF</code>, <code>ME</code>, <code>OCE</code>, <code>global</code></p> <p>Responses:</p> <ul> <li> <p>200 OK</p> <ul> <li>Content-Type: <code>application/json</code></li> <li>Schema: Array of <code>MarketIndex</code> objects.</li> <li>Example (200): <pre><code>[\n  {\n    \"name\": \"S&amp;P 500\",\n    \"value\": 4300.0,\n    \"change\": \"+10.00\",\n    \"percentChange\": \"+0.23%\",\n    \"fiveDaysReturn\": \"-19.35%\",\n    \"oneMonthReturn\": \"-28.48%\",\n    \"threeMonthReturn\": \"-14.02%\",\n    \"sixMonthReturn\": \"36.39%\",\n    \"ytdReturn\": \"+10.00%\",\n    \"yearReturn\": \"+20.00%\",\n    \"threeYearReturn\": \"+30.00%\",\n    \"fiveYearReturn\": \"+40.00%\",\n    \"tenYearReturn\": \"2,005.31%\",\n    \"maxReturn\": \"22,857.89%\"\n  }\n]\n</code></pre></li> </ul> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": {\n    \"index.0\": [\n      \"Input should be 'snp', 'djia', 'nasdaq', 'nyse-composite', 'nyse-amex', 'rut', 'vix', 'tsx-composite', 'ibovespa', 'ipc-mexico', 'ipsa', 'merval', 'ivbx', 'ibrx-50', 'ftse-100', 'dax', 'cac-40', 'euro-stoxx-50', 'euronext-100', 'bel-20', 'moex', 'aex', 'ibex-35', 'ftse-mib', 'smi', 'psi', 'atx', 'omxs30', 'omxc25', 'wig20', 'budapest-se', 'moex-russia', 'rtsi', 'hang-seng', 'sti', 'sensex', 'idx-composite', 'ftse-bursa', 'kospi', 'twse', 'nikkei-225', 'shanghai', 'szse-component', 'set', 'nifty-50', 'nifty-200', 'psei-composite', 'china-a50', 'dj-shanghai', 'india-vix', 'egx-30', 'jse-40', 'ftse-jse', 'afr-40', 'raf-40', 'sa-40', 'alt-15', 'ta-125', 'ta-35', 'tadawul-all-share', 'tamayuz', 'bist-100', 'asx-200', 'all-ordinaries', 'nzx-50', 'usd', 'msci-europe', 'gbp', 'euro', 'yen', 'australian', 'msci-world' or 'cboe-uk-100'\"\n    ],\n    \"region\": [\n      \"Input should be 'US', 'NA', 'SA', 'EU', 'AS', 'AF', 'ME', 'OCE' or 'global'\"\n    ]\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/indices/#schema-references","title":"Schema References","text":""},{"location":"api/indices/#marketindex-schema","title":"MarketIndex Schema","text":"Field Type Description Required <code>name</code> string Name of the index \u2713 <code>value</code> number Current value of the index \u2713 <code>change</code> string Change in the index \u2713 <code>percentChange</code> string Percentage change \u2713 <code>fiveDaysReturn</code> string 5-day return <code>oneMonthReturn</code> string 1-month return <code>threeMonthReturn</code> string 3-month return <code>sixMonthReturn</code> string 6-month return <code>ytdReturn</code> string Year-to-date return <code>yearReturn</code> string 1-year return <code>threeYearReturn</code> string 3-year return <code>fiveYearReturn</code> string 5-year return <code>tenYearReturn</code> string 10-year return <code>maxReturn</code> string Maximum all-time return"},{"location":"api/movers/","title":"Market Movers","text":""},{"location":"api/movers/#get-v1actives","title":"GET /v1/actives","text":""},{"location":"api/movers/#overview","title":"Overview","text":"<p>Purpose: Get list of most actively traded stocks by volume Response Format: Array of most active stocks with price movement data</p>"},{"location":"api/movers/#authentication","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/movers/#request-parameters","title":"Request Parameters","text":"Parameter Type Required Description Example <code>count</code> string Number of actives to retrieve (default: 50) <code>25</code>"},{"location":"api/movers/#available-count-options","title":"Available Count Options","text":"<p><code>25</code>, <code>50</code>, <code>100</code></p> <pre><code>curl -X GET \"https://finance-query.onrender.com/v1/actives?count=25\" \\\n     -H \"x-api-key: your_api_key_here\"\n</code></pre> <p>Responses:</p> <ul> <li> <p>200 OK</p> <ul> <li>Content-Type: <code>application/json</code></li> <li>Schema: Array of <code>MarketMover</code> objects.</li> <li>Example (200): <pre><code>[\n  {\n    \"symbol\": \"AAPL\",\n    \"name\": \"Apple Inc.\",\n    \"price\": \"145.86\",\n    \"change\": \"+1.00\",\n    \"percentChange\": \"+0.69%\"\n  }\n]\n</code></pre></li> </ul> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": {\n    \"count\": [\"Input should be '25', '50' or '100'\"]\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/movers/#get-v1gainers","title":"GET /v1/gainers","text":""},{"location":"api/movers/#overview_1","title":"Overview","text":"<p>Purpose: Get list of stocks with the highest price increase Response Format: Array of top gaining stocks with price movement data</p>"},{"location":"api/movers/#authentication_1","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/movers/#request-parameters_1","title":"Request Parameters","text":"Parameter Type Required Description Example <code>count</code> string Number of gainers to retrieve (default: 50) <code>25</code>"},{"location":"api/movers/#available-count-options_1","title":"Available Count Options","text":"<p><code>25</code>, <code>50</code>, <code>100</code></p> <pre><code>curl -X GET \"https://finance-query.onrender.com/v1/gainers?count=25\" \\\n     -H \"x-api-key: your_api_key_here\"\n</code></pre> <p>Responses:</p> <ul> <li> <p>200 OK</p> <ul> <li>Content-Type: <code>application/json</code></li> <li>Schema: Array of <code>MarketMover</code> objects.</li> <li>Example (200): <pre><code>[\n  {\n    \"symbol\": \"TSLA\",\n    \"name\": \"Tesla Inc.\",\n    \"price\": \"900.00\",\n    \"change\": \"+25.00\",\n    \"percentChange\": \"+2.86%\"\n  }\n]\n</code></pre></li> </ul> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": {\n    \"count\": [\"Input should be '25', '50' or '100'\"]\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/movers/#get-v1losers","title":"GET /v1/losers","text":""},{"location":"api/movers/#overview_2","title":"Overview","text":"<p>Purpose: Get list of stocks with the highest price decrease Response Format: Array of top losing stocks with price movement data</p>"},{"location":"api/movers/#authentication_2","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/movers/#request-parameters_2","title":"Request Parameters","text":"Parameter Type Required Description Example <code>count</code> string Number of losers to retrieve (default: 50) <code>25</code>"},{"location":"api/movers/#available-count-options_2","title":"Available Count Options","text":"<p><code>25</code>, <code>50</code>, <code>100</code></p> <pre><code>curl -X GET \"https://finance-query.onrender.com/v1/losers?count=25\" \\\n     -H \"x-api-key: your_api_key_here\"\n</code></pre> <p>Responses:</p> <ul> <li> <p>200 OK</p> <ul> <li>Content-Type: <code>application/json</code></li> <li>Schema: Array of <code>MarketMover</code> objects.</li> <li>Example (200): <pre><code>[\n  {\n    \"symbol\": \"AMZN\",\n    \"name\": \"Amazon.com Inc.\",\n    \"price\": \"110.00\",\n    \"change\": \"-5.00\",\n    \"percentChange\": \"-4.35%\"\n  }\n]\n</code></pre></li> </ul> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": {\n    \"count\": [\"Input should be '25', '50' or '100'\"]\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/movers/#schema-references","title":"Schema References","text":""},{"location":"api/movers/#marketmover-schema","title":"MarketMover Schema","text":"Field Type Description Required <code>symbol</code> string Stock symbol \u2713 <code>name</code> string Company name \u2713 <code>price</code> string Last traded price \u2713 <code>change</code> string Change in price \u2713 <code>percentChange</code> string Percentage change \u2713"},{"location":"api/news/","title":"News","text":""},{"location":"api/news/#get-v1news","title":"GET /v1/news","text":""},{"location":"api/news/#overview","title":"Overview","text":"<p>Purpose: Get financial news Response Format: Array of news articles with metadata</p>"},{"location":"api/news/#authentication","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/news/#request-parameters","title":"Request Parameters","text":"Parameter Type Required Description Example <code>symbol</code> string Ticker symbol (returns general news if omitted) <code>AAPL</code> <p>Responses:</p> <ul> <li> <p>200 OK</p> <ul> <li>Content-Type: <code>application/json</code></li> <li>Schema: Array of <code>News</code> objects.</li> <li>Example (200): <pre><code>[\n  {\n    \"title\": \"New iPhone Released!\",\n    \"link\": \"https://www.example.com/new-iphone\",\n    \"source\": \"TechCrunch\",\n    \"img\": \"https://www.example.com/image.jpg\",\n    \"time\": \"1 day ago\"\n  }\n]\n</code></pre></li> </ul> </li> <li> <p>404 Not Found <pre><code>{ \"detail\": \"No news found for the given symbol\" }\n</code></pre></p> </li> <li> <p>422 Unprocessable Entity <pre><code>{ \"detail\": \"Invalid request\" }\n</code></pre></p> </li> </ul>"},{"location":"api/news/#schema-references","title":"Schema References","text":""},{"location":"api/news/#news-schema","title":"News Schema","text":"Field Type Description Required title string Title of the news article \u2713 link string URL to the full article \u2713 source string News source \u2713 img string URL to accompanying image \u2713 time string Time relative to now \u2713"},{"location":"api/quotes/","title":"Quotes","text":""},{"location":"api/quotes/#get-v1quotes","title":"GET /v1/quotes","text":""},{"location":"api/quotes/#overview","title":"Overview","text":"<p>Purpose: Retrieve comprehensive quote data for multiple stocks Response Format: Detailed stock information with all available fields</p>"},{"location":"api/quotes/#authentication","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/quotes/#request-parameters","title":"Request Parameters","text":"Parameter Type Required Description Example <code>symbols</code> string \u2713 Comma-separated list of tickers <code>AAPL,MSFT,GOOG</code> <p>Responses:</p> <ul> <li>200 OK </li> <li>Content-Type: <code>application/json</code> </li> <li>Schema: Array of <code>Quote</code> objects  </li> <li> <p>Example (200): <pre><code>[\n  {\n    \"symbol\": \"AAPL\",\n    \"name\": \"Apple Inc.\",\n    \"price\": \"145.00\",\n    \"preMarketPrice\": \"145.50\",\n    \"afterHoursPrice\": \"145.50\",\n    \"change\": \"+1.00\",\n    \"percentChange\": \"+0.69%\",\n    \"open\": \"144.00\",\n    \"high\": \"146.00\",\n    \"low\": \"143.00\",\n    \"yearHigh\": \"150.00\",\n    \"yearLow\": \"100.00\",\n    \"volume\": 1000000,\n    \"avgVolume\": 2000000,\n    \"marketCap\": \"2.5T\",\n    \"beta\": 1.23,\n    \"pe\": \"30.00\",\n    \"eps\": \"4.50\",\n    \"dividend\": \"0.82\",\n    \"yield\": \"1.3%\",\n    \"exDividend\": \"Feb 5, 2024\",\n    \"netAssets\": \"10.5B\",\n    \"nav\": \"100.00\",\n    \"expenseRatio\": \"0.05%\",\n    \"category\": \"Large Growth\",\n    \"lastCapitalGain\": \"10.00\",\n    \"morningstarRating\": \"\u2605\u2605\",\n    \"morningstarRiskRating\": \"Low\",\n    \"holdingsTurnover\": \"5.00%\",\n    \"earningsDate\": \"Apr 23, 2024\",\n    \"lastDividend\": \"0.82\",\n    \"inceptionDate\": \"Jan 1, 2020\",\n    \"sector\": \"Technology\",\n    \"industry\": \"Consumer Electronics\",\n    \"about\": \"Apple Inc. designs, manufactures, and markets smartphones, personal computers, tablets, wearables, and accessories worldwide.\",\n    \"employees\": \"150,000\",\n    \"fiveDaysReturn\": \"-19.35%\",\n    \"oneMonthReturn\": \"-28.48%\",\n    \"threeMonthReturn\": \"-14.02%\",\n    \"sixMonthReturn\": \"36.39%\",\n    \"ytdReturn\": \"+10.00%\",\n    \"yearReturn\": \"+20.00%\",\n    \"threeYearReturn\": \"+30.00%\",\n    \"fiveYearReturn\": \"+40.00%\",\n    \"tenYearReturn\": \"2,005.31%\",\n    \"maxReturn\": \"22,857.89%\",\n    \"logo\": \"https://img.logo.dev/apple.com?token=pk_Xd1Cdye3QYmCOXzcvxhxyw&amp;retina=true\"\n  }\n]\n</code></pre></p> </li> <li> <p>404 Not Found <pre><code>{ \"detail\": \"Symbol not found\" }\n</code></pre></p> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": { \"symbols\": [\"Field required\"] }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/quotes/#get-v1simple-quotes","title":"GET /v1/simple-quotes","text":""},{"location":"api/quotes/#overview_1","title":"Overview","text":"<p>Purpose: Retrieve simplified quote data for multiple stocks Response Format: Basic stock information including symbols, names, prices, and changes</p>"},{"location":"api/quotes/#authentication_1","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/quotes/#request-parameters_1","title":"Request Parameters","text":"Parameter Type Required Description Example <code>symbols</code> string \u2713 Comma-separated list of tickers <code>AAPL,MSFT,GOOG</code> <p>Responses:</p> <ul> <li>200 OK</li> <li>Content-Type: <code>application/json</code></li> <li>Schema: Array of <code>SimpleQuote</code> objects.</li> <li> <p>Example (200): <pre><code>[\n  {\n    \"symbol\": \"AAPL\",\n    \"name\": \"Apple Inc.\",\n    \"price\": \"145.00\",\n    \"change\": \"+1.00\",\n    \"percentChange\": \"+0.69%\",\n    \"logo\": \"https://img.logo.dev/apple.com?token=\u2026\"\n  }\n]\n</code></pre></p> </li> <li> <p>404 Not Found <pre><code>{ \"detail\": \"Symbol not found\" }\n</code></pre></p> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": { \"symbols\": [\"Field required\"] }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/quotes/#get-v1similar","title":"GET /v1/similar","text":""},{"location":"api/quotes/#overview_2","title":"Overview","text":"<p>Purpose: Find stocks similar to a specific ticker Response Format: List of comparable stocks with simplified quote data</p>"},{"location":"api/quotes/#authentication_2","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/quotes/#request-parameters_2","title":"Request Parameters","text":"Parameter Type Required Description Example <code>symbol</code> string \u2713 Base stock for comparison <code>AAPL</code> <code>limit</code> integer Maximum results (default: 10) <code>15</code> <p>Note: Limit parameter accepts values between 1 and 20.</p> <p>Responses:</p> <ul> <li>200 OK</li> <li>Content-Type: <code>application/json</code></li> <li>Schema: Array of <code>SimpleQuote</code> objects.</li> <li> <p>Example (200): <pre><code>[\n  {\n    \"symbol\": \"AAPL\",\n    \"name\": \"Apple Inc.\",\n    \"price\": \"146.06\",\n    \"change\": \"-0.11\",\n    \"percentChange\": \"-0.11%\",\n    \"logo\": \"https://img.logo.dev/apple.com?token=\u2026\"\n  }\n]\n</code></pre></p> </li> <li> <p>404 Not Found <pre><code>{ \"detail\": \"No similar stocks found or invalid symbol\" }\n</code></pre></p> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": {\n    \"limit\": [\"Input should be greater than or equal to 1 and less than or equal to 20\"]\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/quotes/#schema-references","title":"Schema References","text":""},{"location":"api/quotes/#quote-schema","title":"Quote Schema","text":"Field Type Description Required symbol string Stock symbol (e.g., \"AAPL\") \u2713 name string Company name (e.g., \"Apple Inc.\") \u2713 price string Last traded price (e.g., \"145.00\") \u2713 preMarketPrice string Pre-market price (if available) afterHoursPrice string After-hours price (if available) change string Change in price (e.g., \"+1.00\") \u2713 percentChange string Percentage change (e.g., \"+0.69%\") \u2713 open string Opening price of the stock high string Highest price of the trading day low string Lowest price of the trading day yearHigh string 52-week high price yearLow string 52-week low price volume integer Volume traded avgVolume integer Average volume marketCap string Market capitalization beta string Beta of the stock pe string Price-to-earnings ratio eps string Earnings per share dividend string Dividend yield yield string Dividend yield in percentage exDividend string Ex-dividend date netAssets string Net assets (for funds) nav string Net asset value (for funds) expenseRatio string Expense ratio (for funds) category string Fund category (e.g., \"Large Growth\") lastCapitalGain string Last capital gain distribution (for funds) morningstarRating string Morningstar rating (for funds) morningstarRiskRating string Morningstar risk rating (for funds) holdingsTurnover string Holdings turnover (for funds) earningsDate string Next earnings date (if available) lastDividend string Last dividend distribution inceptionDate string Inception date (for funds) sector string Sector of the company industry string Industry of the company about string Company description employees string Number of employees fiveDaysReturn string 5-day return oneMonthReturn string 1-month return threeMonthReturn string 3-month return sixMonthReturn string 6-month return ytdReturn string Year-to-date return yearReturn string 1-year return threeYearReturn string 3-year return fiveYearReturn string 5-year return tenYearReturn string 10-year return maxReturn string All-time maximum return logo string URL to company logo"},{"location":"api/quotes/#simplequote-schema","title":"SimpleQuote Schema","text":"Field Type Description Required symbol string Stock symbol \u2713 name string Company name \u2713 price string Last traded price \u2713 preMarketPrice string Pre-market price (if any) afterHoursPrice string After-hours price (if any) change string Change in price \u2713 percentChange string Percentage change \u2713 logo string URL to company logo"},{"location":"api/search/","title":"Search","text":""},{"location":"api/search/#search-provider","title":"Search Provider","text":"<p>This endpoint uses Algolia search with my personal credentials provided for your convenience:</p> <ol> <li>Shared credentials: I've shared my personal Algolia credentials (free tier, search-only) for open use. Please use    responsibly.</li> <li>Your own credentials: You can configure your own Algolia credentials via environment variables:<ul> <li><code>ALGOLIA_APP_ID</code>: Your Algolia application ID</li> <li><code>ALGOLIA_API_KEY</code>: Your Algolia search API key</li> </ul> </li> <li>Yahoo Finance fallback: The API falls back to Yahoo Finance search automatically on errors or on configured    request parameter <code>yahoo</code>.</li> </ol> <p>Default Credentials</p> <p>The API includes shared Algolia credentials for convenience. These are search-only and cannot modify data. If you need high-volume access, please configure your own credentials.</p>"},{"location":"api/search/#get-v1search","title":"GET /v1/search","text":""},{"location":"api/search/#overview","title":"Overview","text":"<p>Purpose: Search for stocks by company name or symbol Response Format: Array of matching securities with basic information and metadata</p>"},{"location":"api/search/#authentication","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/search/#request-parameters","title":"Request Parameters","text":"Parameter Type Required Description Example <code>query</code> string \u2713 Partial or full company name or symbol <code>Apple</code> <code>hits</code> integer Number of results to return (default: 50) <code>25</code> <code>type</code> string Filter by security type (default: all) <code>stock</code> <code>use_algolia</code> boolean Whether to use Algolia or Yahoo (default: true) <code>false</code> <p>Parameter Constraints</p> <ul> <li><code>hits</code> parameter accepts values between 1 and 100</li> <li><code>type</code> parameter accepts: <code>stock</code>, <code>etf</code>, or <code>trust</code></li> </ul> <p>Responses:</p> <ul> <li> <p>200 OK</p> <ul> <li>Content-Type: <code>application/json</code></li> <li>Schema: Array of <code>SearchResult</code> objects</li> <li>Example (200): <pre><code>[\n  {\n    \"name\": \"Apple Inc.\",\n    \"symbol\": \"AAPL\",\n    \"exchange\": \"NASDAQ\",\n    \"type\": \"stock\"\n  }\n]\n</code></pre></li> </ul> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": {\n    \"query\": [\"Field required\"],\n    \"hits\": [\"Input should be less than or equal to 100\"],\n    \"type\": [\"Input should be 'stock', 'etf', or 'trust'\"]\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/search/#schema-references","title":"Schema References","text":""},{"location":"api/search/#searchresult-schema","title":"SearchResult Schema","text":"Field Type Description Required name string Full company name (e.g., \"Apple Inc.\") \u2713 symbol string Stock symbol (e.g., \"AAPL\") \u2713 exchange string Exchange where security trades (e.g., \"NASDAQ\") \u2713 type string Security type (e.g., \"stock\", \"etf\", \"trust\") \u2713"},{"location":"api/sectors/","title":"Sectors","text":""},{"location":"api/sectors/#get-v1sectors","title":"GET /v1/sectors","text":""},{"location":"api/sectors/#overview","title":"Overview","text":"<p>Purpose: Retrieve summary performance data for all market sectors Response Format: Array of sector performance summaries with returns over multiple time periods</p>"},{"location":"api/sectors/#authentication","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p> <p>Responses:</p> <ul> <li>200 OK</li> <li>Content-Type: <code>application/json</code></li> <li>Schema: Array of <code>MarketSector</code> objects</li> <li>Example (200): <pre><code>[\n  {\n    \"sector\": \"Technology\",\n    \"dayReturn\": \"-0.69%\",\n    \"ytdReturn\": \"-2.36%\",\n    \"yearReturn\": \"+24.00%\",\n    \"threeYearReturn\": \"+50.20%\",\n    \"fiveYearReturn\": \"+158.41%\"\n  },\n  {\n    \"sector\": \"Healthcare\",\n    \"dayReturn\": \"+0.87%\",\n    \"ytdReturn\": \"+7.45%\",\n    \"yearReturn\": \"+4.04%\",\n    \"threeYearReturn\": \"+7.59%\",\n    \"fiveYearReturn\": \"+44.74%\"\n  }\n]\n</code></pre></li> </ul>"},{"location":"api/sectors/#get-v1sectorssymbolsymbol","title":"GET /v1/sectors/symbol/{symbol}","text":""},{"location":"api/sectors/#overview_1","title":"Overview","text":"<p>Purpose: Retrieve sector performance summary for a specific stock symbol Response Format: Single sector performance object with returns over multiple time periods</p>"},{"location":"api/sectors/#authentication_1","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/sectors/#request-parameters","title":"Request Parameters","text":"Parameter Type Required Description Example <code>symbol</code> string \u2713 Stock symbol <code>AAPL</code> <p>Responses:</p> <ul> <li>200 OK</li> <li>Content-Type: <code>application/json</code></li> <li>Schema: <code>MarketSector</code> object</li> <li> <p>Example (200): <pre><code>{\n  \"sector\": \"Technology\",\n  \"dayReturn\": \"-0.46%\",\n  \"ytdReturn\": \"-2.13%\",\n  \"yearReturn\": \"+24.28%\",\n  \"threeYearReturn\": \"+50.55%\",\n  \"fiveYearReturn\": \"+159.00%\"\n}\n</code></pre></p> </li> <li> <p>404 Not Found <pre><code>{ \"detail\": \"Sector for {symbol} not found\" }\n</code></pre></p> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": { \"symbol\": [\"Field required\"] }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/sectors/#get-v1sectorsdetailssector","title":"GET /v1/sectors/details/{sector}","text":""},{"location":"api/sectors/#overview_2","title":"Overview","text":"<p>Purpose: Retrieve comprehensive details for a specific market sector Response Format: Detailed sector information including performance, composition, and top holdings</p>"},{"location":"api/sectors/#authentication_2","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/sectors/#request-parameters_1","title":"Request Parameters","text":"Parameter Type Required Description Example <code>sector</code> string \u2713 Sector name <code>Technology</code> <p>Valid sector names: - Basic Materials - Communication Services - Consumer Cyclical - Consumer Defensive - Energy - Financial Services - Healthcare - Industrials - Real Estate - Technology - Utilities</p> <p>Responses:</p> <ul> <li>200 OK</li> <li>Content-Type: <code>application/json</code></li> <li>Schema: <code>MarketSectorDetails</code> object</li> <li> <p>Example (200): <pre><code>{\n  \"sector\": \"Technology\",\n  \"dayReturn\": \"+0.97%\",\n  \"ytdReturn\": \"+3.35%\",\n  \"yearReturn\": \"+32.59%\",\n  \"threeYearReturn\": \"+66.92%\",\n  \"fiveYearReturn\": \"+179.23%\",\n  \"marketCap\": \"20.196T\",\n  \"marketWeight\": \"29.28%\",\n  \"industries\": 12,\n  \"companies\": 815,\n  \"topIndustries\": [\n    \"Semiconductors: 29.04%\",\n    \"Software - Infrastructure: 26.44%\",\n    \"Consumer Electronics: 16.60%\",\n    \"Software - Application: 13.92%\",\n    \"Information Technology Services: 4.53%\"\n  ],\n  \"topCompanies\": [\"NVDA\",\"AAPL\",\"MSFT\",\"AVGO\",\"ORCL\",\"CRM\",\"CSCO\",\"NOW\",\"ACN\",\"IBM\"]\n}\n</code></pre></p> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": {\n    \"sector\": [\n      \"Input should be 'Basic Materials', 'Communication Services', 'Consumer Cyclical', 'Consumer Defensive', 'Energy', 'Financial Services', 'Healthcare', 'Industrials', 'Real Estate', 'Technology' or 'Utilities'\"\n    ]\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/sectors/#schema-references","title":"Schema References","text":""},{"location":"api/sectors/#marketsector-schema","title":"MarketSector Schema","text":"Field Type Description Required sector string Sector name (e.g., \"Technology\") \u2713 dayReturn string Day change percentage (e.g., \"-0.69%\") \u2713 ytdReturn string Year-to-date return (e.g., \"-2.36%\") \u2713 yearReturn string 1-year return (e.g., \"+24.00%\") \u2713 threeYearReturn string 3-year return (e.g., \"+50.20%\") \u2713 fiveYearReturn string 5-year return (e.g., \"+158.41%\") \u2713"},{"location":"api/sectors/#marketsectordetails-schema","title":"MarketSectorDetails Schema","text":"Field Type Description Required sector string Sector name (e.g., \"Technology\") \u2713 dayReturn string Day change percentage (e.g., \"+0.97%\") \u2713 ytdReturn string Year-to-date return (e.g., \"+3.35%\") \u2713 yearReturn string 1-year return (e.g., \"+32.59%\") \u2713 threeYearReturn string 3-year return (e.g., \"+66.92%\") \u2713 fiveYearReturn string 5-year return (e.g., \"+179.23%\") \u2713 marketCap string Total market capitalization (e.g., \"20.196T\") \u2713 marketWeight string Sector's weight in overall market (e.g., \"29.28%\") \u2713 industries integer Number of industries in the sector \u2713 companies integer Number of companies in the sector \u2713 topIndustries string[] List of top industries with percentages \u2713 topCompanies string[] List of top company symbols in the sector \u2713"},{"location":"api/stream/","title":"Server-Sent Events (SSE)","text":""},{"location":"api/stream/#get-v1streamquotes","title":"GET /v1/stream/quotes","text":""},{"location":"api/stream/#overview","title":"Overview","text":"<p>Purpose: Stream real-time stock quotes via Server-Sent Events Response Format: Text event stream with stock quote updates every 10 seconds</p>"},{"location":"api/stream/#authentication","title":"Authentication","text":"<p>Optional authentication via <code>x-api-key</code> header token</p>"},{"location":"api/stream/#request-parameters","title":"Request Parameters","text":"Parameter Type Required Description Example <code>symbols</code> string \u2713 Comma-separated list of stock symbols <code>NVDA,TSLA</code> <p>Responses:</p> <ul> <li> <p>200 OK</p> <ul> <li>Content-Type: <code>text/event-stream</code></li> <li>Example Event Stream: <pre><code>quote: [\n  {\n    \"symbol\":\"NVDA\",\n    \"name\":\"NVIDIA Corporation\",\n    \"price\":\"142.62\",\n    \"change\":\"-4.60\",\n    \"percentChange\":\"-3.12%\",\n    \"logo\":\"https://img.logo.dev/nvidia.com?token=...\"\n  }\n]\n\nquote: [\n  {\n    \"symbol\":\"NVDA\",\n    \"name\":\"NVIDIA Corporation\",\n    \"price\":\"143.00\",\n    \"change\":\"+0.38\",\n    \"percentChange\":\"+0.27%\",\n    \"logo\":\"https://img.logo.dev/nvidia.com?token=...\"\n  }\n]\n</code></pre></li> </ul> </li> <li> <p>404 Not Found <pre><code>{ \"detail\": \"Symbol not found\" }\n</code></pre></p> </li> <li> <p>422 Unprocessable Entity <pre><code>{\n  \"detail\": \"Invalid request\",\n  \"errors\": { \"symbols\": [\"Field required\"] }\n}\n</code></pre></p> </li> </ul>"},{"location":"api/stream/#schema-references","title":"Schema References","text":""},{"location":"api/stream/#simplequote-schema","title":"SimpleQuote Schema","text":"Field Type Description Required symbol string Stock symbol \u2713 name string Company name \u2713 price string Last traded price \u2713 change string Change in price \u2713 percentChange string Percentage change \u2713 logo string URL to company logo"},{"location":"development/architecture/","title":"FinanceQuery API Architecture","text":""},{"location":"development/architecture/#1-overview","title":"1. Overview","text":"<p>FinanceQuery is a FastAPI-based application designed to provide financial data by scraping web sources and interacting with Yahoo Finance's unofficial API. It offers RESTful endpoints for various financial data points and WebSocket support for real-time data streaming. The architecture emphasizes modularity, asynchronous operations, and resilience.</p>"},{"location":"development/architecture/#2-core-components","title":"2. Core Components","text":""},{"location":"development/architecture/#21-fastapi-application-mainpy","title":"2.1. FastAPI Application (<code>main.py</code>)","text":"<p>The core of the application is a FastAPI instance. - Initialization: Sets up metadata like title, version, description, server URLs, contact, and license information.</p> <ul> <li> <p>Lifespan Management: A <code>lifespan</code> asynchronous context manager handles the initialization and cleanup of shared resources:</p> <ul> <li><code>fastapi_injectable</code> registration.</li> <li>Shared <code>curl_cffi.requests.Session</code> for HTTP requests.</li> <li><code>YahooAuthManager</code> instance for managing Yahoo Finance authentication.</li> <li>Optional proxy setup (<code>PROXY_URL</code>, <code>USE_PROXY</code>).</li> <li>Optional Redis client (<code>REDIS_URL</code>) for caching and WebSocket message brokering.</li> <li>WebSocket <code>ConnectionManager</code> (defaults to in-memory, or <code>RedisConnectionManager</code> if Redis is enabled).</li> <li>Primes Yahoo authentication on startup for faster initial user requests.</li> <li>Ensures cleanup of resources (exit stacks, connection manager, proxy whitelist, Redis connection) on shutdown.</li> </ul> </li> <li> <p>Middleware:</p> <ul> <li><code>CORSMiddleware</code>: Configured to allow all origins, methods, and headers, and exposes rate limit headers.</li> <li><code>RequestContextMiddleware</code>: Makes the <code>Request</code> or <code>WebSocket</code> object accessible throughout the application via a context variable. This is crucial for dependency injection and accessing request-specific state.</li> <li><code>RateLimitMiddleware</code>: (Optional, enabled by <code>USE_SECURITY</code> env var) Provides rate limiting capabilities.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>A custom exception handler for <code>RequestValidationError</code> formats Pydantic validation errors into a more user-friendly JSON structure.</li> </ul> </li> <li> <p>Routing:</p> <ul> <li>Includes various routers for different API functionalities (e.g., quotes, historical prices, news, WebSockets). Routers are typically prefixed with <code>/v1</code>. Each router groups related endpoints and utilizes Pydantic models for request and response validation and serialization.</li> </ul> </li> <li> <p>Deployment:</p> <ul> <li><code>Mangum</code> adapter is used to allow deployment as an AWS Lambda function.</li> </ul> </li> </ul>"},{"location":"development/architecture/#22-health-checks-mainpy","title":"2.2. Health Checks (<code>main.py</code>)","text":"<ul> <li><code>/ping</code>: A simple endpoint to check if the server is alive and responding. Returns status and current timestamp.</li> <li><code>/health</code>: A detailed health check endpoint that verifies:<ul> <li>Basic API health.</li> <li>Redis connectivity and latency (if configured).</li> <li>Status of various internal services by making sample calls (e.g., fetching indices, market movers, news, quotes). Reports success/failure for each service.</li> </ul> </li> </ul>"},{"location":"development/architecture/#23-models-and-routers","title":"2.3. Models and Routers","text":""},{"location":"development/architecture/#pydantic-models-srcmodels","title":"Pydantic Models (<code>src/models</code>)","text":"<p>Pydantic models are extensively used throughout the application, primarily defined in <code>src/models.py</code> (or similar modules within a <code>models</code> directory). Their roles include:</p> <ul> <li>Data Validation: Defining the expected structure, data types, and validation rules for incoming request data (path parameters, query parameters, request bodies). FastAPI automatically uses these models to validate incoming data.</li> <li>Data Serialization: Defining the structure and data types for outgoing API responses. FastAPI uses these models to serialize response data into JSON.</li> <li>API Contract: Serving as a clear and enforceable contract for API inputs and outputs.</li> <li>OpenAPI Schema Generation: FastAPI leverages these Pydantic models to automatically generate the OpenAPI (Swagger) documentation, providing interactive API docs.</li> <li>Error Reporting: When validation fails, FastAPI (in conjunction with the custom <code>RequestValidationError</code> handler) uses the model definitions to provide detailed error messages.</li> </ul>"},{"location":"development/architecture/#routers-srcroutes","title":"Routers (<code>src/routes</code>)","text":"<p>The API's functionality is organized into modular routers, typically with each file in the <code>src/routes/</code> directory representing a distinct set of related endpoints or a microservice.</p> <ul> <li>Modular Design: Each router (e.g., <code>quotes_router.py</code>, <code>historical_prices_router.py</code>) encapsulates the logic for a specific feature (e.g., fetching quotes, retrieving historical data).</li> <li>Endpoint Definition: Routers define API path operations (e.g., <code>@router.get(\"/symbols\")</code>) along with their associated HTTP methods.</li> <li>Model Integration:<ul> <li>Path operation functions use Pydantic models as type hints for request bodies, query parameters, and path parameters. This enables FastAPI's automatic validation.</li> <li>The <code>response_model</code> parameter in path operation decorators is set to a Pydantic model to define the structure of the response, ensuring consistent output and enabling automatic serialization and documentation.</li> </ul> </li> <li>Dependency Injection: Routers utilize FastAPI's dependency injection system to obtain necessary services, clients (like <code>FinanceClient</code>), and other resources.</li> <li>Inclusion in Main App: These individual routers are then included in the main FastAPI application instance in <code>main.py</code> (e.g., <code>app.include_router(quotes_router)</code>), often with a common prefix (like <code>/v1</code>).</li> </ul>"},{"location":"development/architecture/#3-routes-models-and-services-architecture","title":"3. Routes, Models, and Services Architecture","text":""},{"location":"development/architecture/#31-models-srcmodels","title":"3.1. Models (<code>src/models</code>)","text":"<p>The application's data structures are defined as Pydantic models, which serve multiple purposes:</p> <ul> <li>API Contract Definition: Models like <code>Quote</code>, <code>SimpleQuote</code>, <code>MarketIndex</code> define the structure of API responses, ensuring consistency and type safety.</li> <li>Input Validation: Models validate incoming request parameters.</li> <li>Documentation Generation: FastAPI uses these models to generate OpenAPI documentation.</li> <li>Serialization/Deserialization: Converting between Python objects and JSON for API interactions.</li> </ul>"},{"location":"development/architecture/#32-routes-srcroutes","title":"3.2. Routes (<code>src/routes</code>)","text":"<p>Routes are organized into logical modules, each responsible for a specific domain:</p> <ul> <li><code>quotes_router</code>: Endpoints for retrieving stock quotes</li> <li><code>historical_prices_router</code>: Historical price data</li> <li><code>indices_router</code>: Market indices data</li> <li><code>sectors_router</code>: Industry sector performance</li> <li><code>movers_router</code>: Market movers (gainers/losers)</li> <li><code>finance_news_router</code>: Financial news</li> <li><code>search_router</code>: Symbol search functionality</li> <li><code>hours_router</code>: Market hours status</li> <li><code>similar_quotes_router</code>: Similar securities</li> <li><code>stream_router</code>: Server-sent events</li> <li><code>sockets_router</code>: WebSocket connections</li> </ul> <p>Each router defines endpoints with: - Path and HTTP method - Parameter and response type definitions - Documentation and examples - Security requirements - Error handling specifications</p>"},{"location":"development/architecture/#33-services-srcservices","title":"3.3. Services (<code>src/services</code>)","text":"<p>Services implement the business logic for the API, acting as an intermediary between routes and data sources:</p>"},{"location":"development/architecture/#service-organization","title":"Service Organization","text":"<p>Services are organized by domain (quotes, news, sectors, etc.), with each service implementing a specific data retrieval function:</p> <p>Info</p> <p>Example directory structure: <pre><code>src/services/\n\u251c\u2500\u2500 quotes/\n\u2502   \u251c\u2500\u2500 fetchers/\n\u2502   \u2502   \u251c\u2500\u2500 quote_api.py    # Primary API-based fetchers\n\u2502   \u2502   \u2514\u2500\u2500 quote_scraper.py  # Fallback web scraping implementation\n\u2502   \u251c\u2500\u2500 get_quotes.py       # Main service functions with retry logic\n\u2502   \u2514\u2500\u2500 utils.py           # Helper functions for fetchers\n\u251c\u2500\u2500 news/\n\u251c\u2500\u2500 sectors/\n\u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"development/architecture/#multi-source-strategy-pattern","title":"Multi-Source Strategy Pattern","text":"<p>Many services implement a dual-fetching strategy:</p> <ol> <li>Primary Source (usually Yahoo Finance API):</li> <li>Faster and more reliable when available</li> <li> <p>Used as the first attempt</p> </li> <li> <p>Fallback Source (usually web scraping):</p> </li> <li>More resilient to API changes</li> <li>Used when primary source fails</li> </ol> <p>For example, quote data has: - <code>fetch_quotes()</code>: Primary API-based implementation in <code>quote_api.py</code> - <code>scrape_quotes()</code>: Fallback web scraping implementation in <code>quote_scraper.py</code></p> <p>The main service function (e.g., <code>get_quotes()</code>) uses the <code>@retry</code> decorator to attempt the primary source first and fall back to web scraping if needed.</p>"},{"location":"development/architecture/#34-caching-strategy-srcutilscachepy","title":"3.4. Caching Strategy (<code>src/utils/cache.py</code>)","text":"<p>The application implements a flexible caching system:</p> <ul> <li> <p>Cache Handlers:</p> <ul> <li><code>RedisCacheHandler</code>: Distributed caching when Redis is available.</li> <li><code>MemCacheHandler</code>: Local in-memory caching when Redis is unavailable.</li> </ul> </li> <li> <p>Smart Expiration:</p> <ul> <li>Standard TTL for normal market hours.</li> <li>Extended TTL when market is closed (<code>market_closed_expire</code>).</li> <li>Uses <code>MarketSchedule</code> to determine market open/closed status.</li> </ul> </li> <li> <p>Cache Key Generation:</p> <ul> <li>Generated from function name and SHA-256 hash of arguments.</li> <li>Excludes non-serializable objects like HTTP clients.</li> </ul> </li> <li> <p>Type-Aware Deserialization:</p> <ul> <li>Maintains Pydantic model types after retrieval.</li> <li>Special handling for collections (lists, dicts).</li> </ul> </li> <li> <p>Environment Controls:</p> <ul> <li><code>BYPASS_CACHE</code> environment variable to disable caching.</li> <li>Redis connection driven by <code>REDIS_URL</code> availability.</li> </ul> </li> </ul>"},{"location":"development/architecture/#35-retry-mechanism-srcutilsretrypy","title":"3.5. Retry Mechanism (<code>src/utils/retry.py</code>)","text":"<p>A sophisticated retry decorator provides resilience for data fetching:</p> <ul> <li> <p>Configurable Retries:</p> <ul> <li>Attempts primary function up to specified number of times</li> <li>Falls back to alternative implementation after exhausting retries</li> </ul> </li> <li> <p>Intelligent Fallback:</p> <ul> <li>Analyzes function signatures to pass only compatible parameters</li> <li>Logs exceptions and retry attempts</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Propagates <code>HTTPException</code> directly (don't retry client errors)</li> <li>Captures other exceptions for retry logic</li> </ul> </li> </ul> <p>Usage Pattern:   <pre><code>@retry(fallback=scrape_quotes, retries=2)\nasync def get_quotes(finance_client, symbols):\n    # Primary implementation using Yahoo Finance API\n    return await fetch_quotes(finance_client, symbols)\n</code></pre></p>"},{"location":"development/architecture/#4-dependency-injection-srcutilsdependenciespy","title":"4. Dependency Injection (<code>src/utils/dependencies.py</code>)","text":"<p>The application heavily utilizes <code>fastapi_injectable</code> for managing dependencies. This promotes modularity and testability by decoupling components.</p> <ul> <li> <p>Shared Resources: Provides injectable dependencies for:</p> <ul> <li><code>RequestContext</code>: The current <code>Request</code> or <code>WebSocket</code> object, made available via <code>RequestContextMiddleware</code>.</li> <li><code>WebsocketConnectionManager</code>: The active WebSocket connection manager, which can be either <code>ConnectionManager</code> (in-memory) or <code>RedisConnectionManager</code> (if Redis is enabled).</li> <li><code>RedisClient</code>: The shared Redis client instance, available if <code>REDIS_URL</code> is configured.</li> <li><code>Session</code>: The shared <code>curl_cffi.requests.Session</code> for making HTTP requests, initialized during application lifespan.</li> <li><code>Proxy</code>: The proxy URL string, configured via environment variables.</li> <li><code>AuthManager</code>: The shared <code>YahooAuthManager</code> instance for handling Yahoo Finance authentication.</li> <li><code>YahooAuth</code>: A tuple of <code>(cookies, crumb)</code> obtained from <code>YahooAuthManager</code>, representing the current authentication credentials.</li> <li><code>MarketSchedule</code>: Provides information about market open/closed status and upcoming holidays.</li> </ul> </li> <li> <p>Client Abstractions:</p> <ul> <li><code>FetchClient</code>: An instance of <code>CurlFetchClient</code>, a general-purpose asynchronous HTTP client built on <code>curl_cffi</code>.</li> <li><code>FinanceClient</code>: An instance of <code>YahooFinanceClient</code>, a specialized client for interacting with the Yahoo Finance API, pre-configured with authentication details.</li> </ul> </li> <li> <p>Utility Functions as Dependencies:</p> <ul> <li><code>fetch</code>: A generic async function to perform HTTP requests using the <code>FetchClient</code>, including built-in retry logic. This is injectable and used by various services.</li> <li><code>get_logo</code>: A utility to fetch company logos, attempting <code>logo.dev</code> first and falling back to domain icons.</li> </ul> </li> <li> <p>How it Works:</p> <ul> <li>Dependencies are defined as functions decorated with <code>@injectable</code>.</li> <li>FastAPI automatically resolves and injects these dependencies into route handlers and other dependent functions based on type hints.</li> <li>For example, a route handler can request a <code>FinanceClient</code> by simply type-hinting a parameter: <code>async def my_route(client: FinanceClient): ...</code></li> </ul> </li> </ul>"},{"location":"development/architecture/#5-yahoo-authentication-srcutilsyahoo_authpy","title":"5. Yahoo Authentication (<code>src/utils/yahoo_auth.py</code>)","text":"<p>Authentication with Yahoo Finance is crucial for accessing their unofficial API. The <code>YahooAuthManager</code> class handles this process:</p> <ul> <li>Cookie and Crumb: Yahoo Finance API requests require a valid cookie and a \"crumb\" (a type of CSRF token).</li> <li><code>YahooAuthManager</code>:<ul> <li>Manages fetching and caching of the cookie and crumb.</li> <li>A single instance is created at application startup and shared.</li> <li>Uses an <code>asyncio.Lock</code> to prevent concurrent refresh attempts.</li> <li><code>refresh()</code> method: Fetches a new cookie/crumb pair. It first tries a direct crumb endpoint. If that fails (e.g., due to consent requirements), it navigates the Yahoo consent flow to obtain a CSRF token and session ID, then uses these to get a valid crumb.</li> <li><code>get_or_refresh()</code> method: Provides the cached cookie/crumb if still valid (within <code>_MIN_REFRESH_INTERVAL</code>), otherwise triggers a refresh. This is the primary method used by dependencies.</li> </ul> </li> <li>Error Handling: Raises <code>YahooAuthError</code> if it fails to obtain a valid cookie/crumb after attempting all methods.</li> <li>Integration: The <code>YahooAuth</code> dependency in <code>dependencies.py</code> uses <code>YahooAuthManager</code> to provide the auth details to <code>YahooFinanceClient</code>.</li> </ul>"},{"location":"development/architecture/#6-http-clients","title":"6. HTTP Clients","text":"<p>The application uses <code>curl_cffi</code> for HTTP requests, wrapped in custom client classes for better organization and specific functionalities.</p>"},{"location":"development/architecture/#61-curlfetchclient-srcclientsfetch_clientpy","title":"6.1. <code>CurlFetchClient</code> (<code>src/clients/fetch_client.py</code>)","text":"<p>This is a general-purpose asynchronous HTTP client.</p> <ul> <li>Core Functionality:<ul> <li>Wraps <code>curl_cffi.requests.Session</code>.</li> <li>Provides <code>request()</code> (synchronous) and <code>fetch()</code> (asynchronous) methods.</li> <li>Handles common HTTP methods (GET, POST, etc.).</li> <li>Manages default headers (e.g., User-Agent) which can be overridden.</li> <li>Supports proxy configuration.</li> <li>Includes basic error handling, raising <code>HTTPException</code> on request failures.</li> </ul> </li> <li>Asynchronous Operations: The <code>fetch()</code> method uses <code>asyncio.to_thread</code> to run synchronous <code>curl_cffi</code> calls in a separate thread, making them non-blocking for the asyncio event loop.</li> </ul>"},{"location":"development/architecture/#62-yahoofinanceclient-srcclientsyahoo_clientpy","title":"6.2. <code>YahooFinanceClient</code> (<code>src/clients/yahoo_client.py</code>)","text":"<p>This client inherits from <code>CurlFetchClient</code> and is specialized for Yahoo Finance API interactions.</p> <ul> <li>Initialization: Takes Yahoo cookies and crumb as arguments, which are automatically injected via the <code>FinanceClient</code> dependency.</li> <li><code>_yahoo_request()</code>: A private helper method that:<ul> <li>Adds the <code>crumb</code> to request parameters.</li> <li>Sets a specific User-Agent.</li> <li>Handles Yahoo-specific HTTP error codes (401 for auth failure, 404 for not found, 429 for rate limits) by raising appropriate <code>HTTPException</code>.</li> </ul> </li> <li><code>_json()</code>: A helper to make a request using <code>_yahoo_request()</code> and parse the JSON response, with error handling for parsing failures.</li> <li>API-Specific Methods: Provides methods like <code>get_quote()</code>, <code>get_simple_quotes()</code>, <code>get_chart()</code>, <code>search()</code>, and <code>get_similar_quotes()</code>, each corresponding to a specific Yahoo Finance API endpoint.</li> </ul>"},{"location":"development/architecture/#7-websocket-connection-management","title":"7. WebSocket Connection Management","text":"<p>The API supports real-time data streaming via WebSockets. Connection management is handled by classes in <code>src/connections/</code>.</p>"},{"location":"development/architecture/#71-connectionmanager-srcconnectionsconnection_managerpy","title":"7.1. <code>ConnectionManager</code> (<code>src/connections/connection_manager.py</code>)","text":"<p>This is the default in-memory WebSocket connection manager.</p> <ul> <li><code>active_connections</code>: A dictionary mapping channel names (e.g., a stock symbol) to a list of active <code>WebSocket</code> objects subscribed to that channel.</li> <li><code>tasks</code>: A dictionary mapping channel names to <code>asyncio.Task</code> objects that are responsible for fetching and broadcasting data for that channel.</li> <li><code>connect()</code>:<ul> <li>Adds a new WebSocket to the specified channel.</li> <li>If it's the first connection for a channel, it creates and starts a new data-fetching task for that channel.</li> </ul> </li> <li><code>disconnect()</code>:<ul> <li>Removes a WebSocket from a channel.</li> <li>If a channel has no more active connections, it cancels the associated data-fetching task.</li> </ul> </li> <li><code>broadcast()</code>: Sends a message (JSON) to all WebSockets connected to a specific channel.</li> <li><code>close()</code>: Cleans up all connections and cancels all tasks, typically called during application shutdown.</li> </ul>"},{"location":"development/architecture/#72-redisconnectionmanager-srcconnectionsredis_connection_managerpy","title":"7.2. <code>RedisConnectionManager</code> (<code>src/connections/redis_connection_manager.py</code>)","text":"<p>If Redis is configured (<code>REDIS_URL</code> is set), this manager is used to enable multi-instance WebSocket support.</p> <ul> <li>Leverages Redis Pub/Sub:<ul> <li><code>active_connections</code>: Similar to <code>ConnectionManager</code>, but stores local connections for the current instance.</li> <li><code>pubsub</code>: A dictionary mapping channel names to Redis <code>PubSub</code> objects.</li> <li><code>listen_tasks</code>: Tasks that listen for messages on Redis Pub/Sub channels.</li> <li><code>tasks</code>: Data-fetching tasks, similar to <code>ConnectionManager</code>. One instance of the application will typically run the data fetching task for a given channel.</li> </ul> </li> <li><code>connect()</code>:<ul> <li>Subscribes the local WebSocket.</li> <li>If not already listening, creates a <code>_listen_to_channel</code> task that subscribes to the Redis channel.</li> <li>If no data-fetching task exists for this channel (across all instances, implicitly coordinated or by convention), it starts one.</li> </ul> </li> <li><code>disconnect()</code>:<ul> <li>Removes local WebSocket.</li> <li>If no local connections remain for a channel, cancels the Redis listener task and the data-fetching task for that channel on this instance.</li> <li>Unsubscribes from the Redis channel.</li> </ul> </li> <li><code>_listen_to_channel()</code>: Continuously polls the Redis Pub/Sub channel for messages and uses <code>_broadcast()</code> to send them to locally connected WebSockets.</li> <li><code>_broadcast()</code>: Sends messages to WebSockets connected to the channel on the current instance.</li> <li><code>publish()</code>: Publishes a message to a Redis channel. The data-fetching task uses this method to send data, which is then picked up by <code>_listen_to_channel()</code> on all instances (including the publishing one) that have subscribers for that channel.</li> <li><code>close()</code>: Cleans up local connections, tasks, and Redis Pub/Sub subscriptions.</li> </ul> <p>This architecture allows multiple instances of the application to share WebSocket load. A data-fetching task for a symbol might run on one instance, publish its data to Redis, and then all instances with clients interested in that symbol will receive the data via Redis Pub/Sub and forward it to their respective clients.</p>"},{"location":"development/architecture/#8-rate-limiting-and-security-srcsecurity","title":"8. Rate Limiting and Security (<code>src/security/</code>)","text":"<p>The application implements rate limiting and basic API key security.</p>"},{"location":"development/architecture/#81-securityconfig-srcsecurityrate_limit_managerpy","title":"8.1. <code>SecurityConfig</code> (<code>src/security/rate_limit_manager.py</code>)","text":"<ul> <li>Defines constants for security settings:<ul> <li><code>ADMIN_API_KEY</code>: An API key that bypasses rate limits.</li> <li><code>RATE_LIMIT</code>: Default requests per day for normal users.</li> <li><code>HEALTH_CHECK_INTERVAL</code>: Cooldown period for the <code>/health</code> endpoint per IP.</li> <li><code>OPEN_PATHS</code>: A set of paths (like <code>/docs</code>, <code>/ping</code>) that bypass all security checks.</li> </ul> </li> </ul>"},{"location":"development/architecture/#82-ratelimitmanager-srcsecurityrate_limit_managerpy","title":"8.2. <code>RateLimitManager</code> (<code>src/security/rate_limit_manager.py</code>)","text":"<p>This class manages rate limit counts and health check access, stored in memory.</p> <ul> <li>Storage: Uses dictionaries (<code>rate_limits</code>, <code>health_checks</code>) to store <code>RateLimitEntry</code> (count, expiration) and health check timestamps per IP.</li> <li><code>_clean_expired()</code>: Periodically removes stale entries.</li> <li><code>get_rate_limit_info()</code>: Returns current rate limit status for an IP (count, remaining, reset time).</li> <li><code>get_health_check_info()</code>: Returns whether an IP can access <code>/health</code> and when the cooldown resets.</li> <li><code>check_health_rate_limit()</code>: Enforces the cooldown for the <code>/health</code> endpoint. Admin key bypasses this.</li> <li><code>increment_and_check()</code>: Increments the request count for an IP and checks if the limit is exceeded. Admin key bypasses this. Returns <code>(is_allowed, rate_limit_info)</code>.</li> <li><code>validate_websocket()</code>: Checks rate limits for WebSocket connections. If exceeded, the connection is closed.</li> <li><code>cleanup()</code>: Clears all stored rate limit data.</li> </ul>"},{"location":"development/architecture/#83-ratelimitmiddleware-srcsecurityrate_limit_middlewarepy","title":"8.3. <code>RateLimitMiddleware</code> (<code>src/security/rate_limit_middleware.py</code>)","text":"<p>This FastAPI middleware enforces the rate limits.</p> <ul> <li>Dispatch Logic:<ul> <li>Skips security for paths in <code>SecurityConfig.OPEN_PATHS</code>.</li> <li>For <code>/health</code> path: Uses <code>check_health_rate_limit</code>. If denied, returns 429. Otherwise, adds <code>X-RateLimit-Reset</code> header for health check cooldown.</li> <li>For other paths: Uses <code>increment_and_check</code>. If denied, returns 429. Otherwise, adds <code>X-RateLimit-Limit</code>, <code>X-RateLimit-Remaining</code>, and <code>X-RateLimit-Reset</code> headers to the response.</li> </ul> </li> <li>API Key: Reads <code>x-api-key</code> header to identify admin users.</li> <li>Client IP: Uses <code>request.client.host</code> for rate limiting.</li> </ul> <p>This setup provides a basic but effective way to protect the API from abuse while allowing administrative access and open access to documentation.</p>"},{"location":"development/architecture/#9-authentication-srcutilsyahoo_authpy","title":"9. Authentication (<code>src/utils/yahoo_auth.py</code>)","text":"<p>Authentication with Yahoo Finance is crucial for accessing their unofficial API. The <code>YahooAuthManager</code> class handles this process:</p> <ul> <li>Cookie and Crumb: Yahoo Finance API requests require a valid cookie and a \"crumb\" (a type of CSRF token).</li> <li><code>YahooAuthManager</code>:<ul> <li>Manages fetching and caching of the cookie and crumb.</li> <li>A single instance is created at application startup and shared.</li> <li>Uses an <code>asyncio.Lock</code> to prevent concurrent refresh attempts.</li> <li><code>refresh()</code> method: Fetches a new cookie/crumb pair. It first tries a direct crumb endpoint. If that fails (e.g., due to consent requirements), it navigates the Yahoo consent flow to obtain a CSRF token and session ID, then uses these to get a valid crumb.</li> <li><code>get_or_refresh()</code> method: Provides the cached cookie/crumb if still valid (within <code>_MIN_REFRESH_INTERVAL</code>), otherwise triggers a refresh. This is the primary method used by dependencies.</li> </ul> </li> <li>Error Handling: Raises <code>YahooAuthError</code> if it fails to obtain a valid cookie/crumb after attempting all methods.</li> <li>Integration: The <code>YahooAuth</code> dependency in <code>dependencies.py</code> uses <code>YahooAuthManager</code> to provide the auth details to <code>YahooFinanceClient</code>.</li> </ul>"},{"location":"development/contributing/","title":"Contributor Guide","text":"<p>Thank you for your interest in improving FinanceQuery. This project is open-source under the MIT license and welcomes contributions in the form of bug reports, feature requests, and pull requests.</p> <p>Here is a list of important resources for contributors:</p> <ul> <li>Source Code</li> <li>Demo</li> <li>Documentation</li> <li>Issue Tracker</li> <li>Code of Conduct</li> </ul>"},{"location":"development/contributing/#how-to-report-a-bug","title":"How to report a bug","text":"<p>Report bugs on the Issue Tracker.</p> <p>When filing an issue, make sure to answer these questions:</p> <ul> <li>Which operating system and Python version are you using?</li> <li>Which version of this project are you using?</li> <li>What did you do?</li> <li>What did you expect to see?</li> <li>What did you see instead?</li> </ul> <p>The best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue.</p>"},{"location":"development/contributing/#how-to-request-a-feature","title":"How to request a feature","text":"<p>Request features on the Issue Tracker.</p>"},{"location":"development/contributing/#how-to-set-up-your-development-environment","title":"How to set up your development environment","text":"<p>You need Python 3.11 or newer. We recommend using a virtual environment:</p> <pre><code>$ python -m venv venv\n$ source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre> <p>Install the project dependencies:</p> <pre><code>$ pip install -r requirements.txt\n</code></pre> <p>For development, you'll also need the development dependencies:</p> <pre><code>$ pip install -r requirements/dev.txt\n</code></pre>"},{"location":"development/contributing/#setting-up-environment-variables","title":"Setting up environment variables","text":"<p>Create a <code>.env</code> file in the project root with the following variables: See the <code>.env.template</code> file for an example.</p> <pre><code># Basic configuration\nREDIS_URL=redis://localhost:6379  # Optional, for caching and WebSocket support\nUSE_SECURITY=True  # Enable rate limiting\nBYPASS_CACHE=False  # Set to True to disable caching during development\n\n# Proxy configuration (optional)\nUSE_PROXY=False\nPROXY_URL=\nPROXY_TOKEN=\n</code></pre>"},{"location":"development/contributing/#how-to-test-the-project","title":"How to test the project","text":"<p>Run the full test suite:</p> <pre><code>$ pytest\n</code></pre> <p>You can also run specific test files:</p> <pre><code>$ pytest tests/test_quotes.py\n</code></pre> <p>Unit tests are located in the tests directory, and are written using the pytest testing framework.</p>"},{"location":"development/contributing/#local-development","title":"Local development","text":"<p>To run the application locally:</p> <pre><code>$ python -m uvicorn src.main:app --reload\n</code></pre> <p>This will start the API server at <code>http://localhost:8000</code> with automatic reloading enabled.</p> <p>You can also use Docker:</p> <pre><code>$ docker build -t finance-query .\n$ docker run -p 8000:8000 finance-query\n</code></pre>"},{"location":"development/contributing/#how-to-submit-changes","title":"How to submit changes","text":"<p>Open a pull request to submit changes to this project.</p> <p>Your pull request needs to meet the following guidelines for acceptance:</p> <ul> <li>The test suite must pass without errors and warnings.</li> <li>Include unit tests for new functionality.</li> <li>If your changes add functionality, update the documentation accordingly.</li> <li>Follow the existing code style (Black formatting, isort imports).</li> </ul> <p>Feel free to submit early, though\u2014we can always iterate on this.</p> <p>To run linting and code formatting checks before committing your change, you can use:</p> <pre><code>$ pre-commit run --all-files\n</code></pre> <p>It is recommended to open an issue before starting work on anything. This will allow a chance to talk it over with the owners and validate your approach.</p>"},{"location":"development/contributing/#project-architecture","title":"Project architecture","text":"<p>Please review the architecture document to understand the project's structure before contributing.</p>"},{"location":"websockets/hours/","title":"Hours WebSocket","text":"<p>The Hours WebSocket endpoint provides real-time market status information, indicating whether markets are currently open, closed, in pre-market, or after-hours trading sessions.</p>"},{"location":"websockets/hours/#use-case","title":"Use Case","text":"<p>Use this endpoint when you need to track market hours and status for:</p> <ul> <li>Trading application status indicators</li> <li>Conditional data fetching based on market state</li> <li>User notifications about market status</li> <li>Trading hour restrictions</li> <li>Market countdown timers</li> </ul>"},{"location":"websockets/hours/#connection","title":"Connection","text":""},{"location":"websockets/hours/#url-format","title":"URL Format","text":"<ul> <li>Production: <code>wss://your-domain.com/hours</code></li> <li>Local: <code>ws://localhost:8000/hours</code></li> </ul>"},{"location":"websockets/hours/#parameters","title":"Parameters","text":"<p>No parameters required - provides general market status.</p>"},{"location":"websockets/hours/#usage-examples","title":"Usage Examples","text":""},{"location":"websockets/hours/#javascript","title":"JavaScript","text":"<pre><code>const socket = new WebSocket('wss://finance-query.onrender.com/hours');\n\nsocket.onopen = function(event) {\n    console.log('Connected to market hours stream');\n};\n\nsocket.onmessage = function(event) {\n    const statusData = JSON.parse(event.data);\n    console.log('Market status:', statusData);\n};\n\nsocket.onclose = function(event) {\n    console.log('Market hours stream closed');\n};\n</code></pre>"},{"location":"websockets/hours/#responses","title":"Responses","text":""},{"location":"websockets/hours/#response-format","title":"Response Format","text":"<p>The WebSocket sends JSON responses with market status information:</p> <pre><code>{\n    \"status\": \"OPEN\",\n    \"reason\": \"Regular trading hours\",\n    \"timestamp\": \"2024-01-15T14:30:00.000Z\"\n}\n</code></pre>"},{"location":"websockets/hours/#response-schema","title":"Response Schema","text":"Field Type Description Required status string Market status indicator \u2713 reason string Description of current market state \u2713 timestamp string ISO 8601 timestamp of status update \u2713"},{"location":"websockets/hours/#error-handling","title":"Error Handling","text":"<ul> <li>Connection errors return standard WebSocket error events</li> </ul>"},{"location":"websockets/hours/#channel-naming","title":"Channel Naming","text":"<ul> <li>Channel: Always uses the channel name <code>hours</code></li> </ul>"},{"location":"websockets/market/","title":"Market WebSocket","text":"<p>The Market WebSocket endpoint provides a comprehensive real-time overview of the financial markets, including market movers, major indices, general market news, and sector performance data.</p>"},{"location":"websockets/market/#use-case","title":"Use Case","text":"<p>Use this endpoint when you need a complete market overview for dashboards or market analysis applications. Perfect for:</p> <ul> <li>Market overview dashboards</li> <li>Trading platform home pages  </li> <li>Financial news applications</li> <li>Market analysis tools</li> <li>Portfolio context information</li> </ul>"},{"location":"websockets/market/#connection","title":"Connection","text":""},{"location":"websockets/market/#url-format","title":"URL Format","text":"<ul> <li>Production: <code>wss://your-domain.com/market</code></li> <li>Local: <code>ws://localhost:8000/market</code></li> </ul>"},{"location":"websockets/market/#usage-examples","title":"Usage Examples","text":""},{"location":"websockets/market/#javascript","title":"JavaScript","text":"<pre><code>const socket = new WebSocket('wss://finance-query.onrender.com/market');\n\nsocket.onopen = function(event) {\n    console.log('Connected to market overview stream');\n};\n\nsocket.onmessage = function(event) {\n    const marketData = JSON.parse(event.data);\n    console.log('Market data update:', marketData);\n};\n\nsocket.onclose = function(event) {\n    console.log('Market stream closed');\n};\n</code></pre>"},{"location":"websockets/market/#responses","title":"Responses","text":""},{"location":"websockets/market/#response-format","title":"Response Format","text":"<p>The WebSocket sends comprehensive market data in the following JSON structure:</p> <pre><code>{\n    \"actives\": [\n        {\n            \"symbol\": \"AAPL\",\n            \"name\": \"Apple Inc.\",\n            \"price\": 150.25,\n            \"change\": 2.15,\n            \"percentChange\": 1.45,\n            \"volume\": 45678912\n        },\n        {\n            \"symbol\": \"TSLA\",\n            \"name\": \"Tesla Inc.\",\n            \"price\": 850.30,\n            \"change\": -15.75,\n            \"percentChange\": -1.82,\n            \"volume\": 32145678\n        }\n    ],\n    \"gainers\": [\n        {\n            \"symbol\": \"NVDA\",\n            \"name\": \"NVIDIA Corporation\",\n            \"price\": 420.50,\n            \"change\": 25.30,\n            \"percentChange\": 6.40,\n            \"volume\": 15234567\n        }\n    ],\n    \"losers\": [\n        {\n            \"symbol\": \"NFLX\",\n            \"name\": \"Netflix Inc.\",\n            \"price\": 380.25,\n            \"change\": -18.75,\n            \"percentChange\": -4.70,\n            \"volume\": 8765432\n        }\n    ],\n    \"indices\": [\n        {\n            \"symbol\": \"^GSPC\",\n            \"name\": \"S&amp;P 500\",\n            \"price\": 4250.15,\n            \"change\": 12.50,\n            \"percentChange\": 0.29\n        },\n        {\n            \"symbol\": \"^DJI\", \n            \"name\": \"Dow Jones\",\n            \"price\": 34150.25,\n            \"change\": -45.30,\n            \"percentChange\": -0.13\n        },\n        {\n            \"symbol\": \"^IXIC\",\n            \"name\": \"NASDAQ\",\n            \"price\": 13500.75,\n            \"change\": 85.20,\n            \"percentChange\": 0.63\n        }\n    ],\n    \"headlines\": [\n        {\n            \"title\": \"Federal Reserve Maintains Interest Rates\",\n            \"url\": \"https://example.com/news/fed-rates\",\n            \"publishedAt\": \"2024-01-15T14:30:00Z\",\n            \"source\": \"Financial Times\",\n            \"summary\": \"The Federal Reserve decided to keep rates unchanged...\"\n        },\n        {\n            \"title\": \"Tech Stocks Rally on AI Optimism\",\n            \"url\": \"https://example.com/news/tech-rally\",\n            \"publishedAt\": \"2024-01-15T13:15:00Z\",\n            \"source\": \"MarketWatch\",\n            \"summary\": \"Technology stocks surged following positive AI developments...\"\n        }\n    ],\n    \"sectors\": [\n        {\n            \"sector\": \"Technology\",\n            \"performance\": 1.25,\n            \"change\": 0.35,\n            \"description\": \"Technology sector showing strong performance\"\n        },\n        {\n            \"sector\": \"Healthcare\",\n            \"performance\": -0.45,\n            \"change\": -0.12,\n            \"description\": \"Healthcare sector declining amid regulatory concerns\"\n        },\n        {\n            \"sector\": \"Energy\",\n            \"performance\": 2.15,\n            \"change\": 0.89,\n            \"description\": \"Energy sector boosted by oil price increases\"\n        }\n    ]\n}\n</code></pre>"},{"location":"websockets/market/#response-schema","title":"Response Schema","text":""},{"location":"websockets/market/#top-level-structure","title":"Top-Level Structure","text":"Field Type Description Required actives array Most actively traded stocks by volume \u2713 gainers array Top performing stocks by percentage \u2713 losers array Worst performing stocks by percentage \u2713 indices array Major market indices \u2713 headlines array General financial and economic news \u2713 sectors array Performance of major market sectors \u2713"},{"location":"websockets/market/#market-mover-item-schema","title":"Market Mover Item Schema","text":"Field Type Description Required symbol string Stock ticker symbol \u2713 name string Company name \u2713 price number Current stock price \u2713 change number Absolute price change \u2713 percentChange number Percentage price change \u2713 volume number Trading volume \u2713"},{"location":"websockets/market/#index-item-schema","title":"Index Item Schema","text":"Field Type Description Required symbol string Index symbol \u2713 name string Index name \u2713 price number Current index value \u2713 change number Absolute value change \u2713 percentChange number Percentage value change \u2713"},{"location":"websockets/market/#headline-item-schema","title":"Headline Item Schema","text":"Field Type Description Required title string News article title \u2713 url string Link to full article \u2713 publishedAt string Publication timestamp (ISO) \u2713 source string News source name \u2713 summary string Brief article summary \u2713"},{"location":"websockets/market/#sector-item-schema","title":"Sector Item Schema","text":"Field Type Description Required sector string Sector name \u2713 performance number Overall sector performance \u2713 change number Day-to-day change \u2713 description string Brief sector status summary \u2713"},{"location":"websockets/market/#error-handling","title":"Error Handling","text":"<ul> <li>Individual data sources may fail independently</li> <li>Failed sources return empty arrays</li> <li>Successful sources continue to provide data</li> </ul>"},{"location":"websockets/market/#channel-naming","title":"Channel Naming","text":"<ul> <li>Channel: Always uses the channel name <code>hours</code></li> </ul>"},{"location":"websockets/profile/","title":"Profile WebSocket","text":"<p>The Profile WebSocket endpoint provides comprehensive real-time data for a single stock symbol, including detailed quotes, similar stocks, sector performance, and relevant news.</p>"},{"location":"websockets/profile/#use-case","title":"Use Case","text":"<p>Use this endpoint when you need extensive information for a single stock and want real-time updates. Perfect for:</p> <ul> <li>Stock detail pages</li> <li>Individual stock monitoring</li> <li>Comprehensive stock analysis dashboards</li> </ul>"},{"location":"websockets/profile/#connection","title":"Connection","text":""},{"location":"websockets/profile/#url-format","title":"URL Format","text":"<ul> <li>Production: <code>wss://your-domain.com/profile/AAPL</code></li> <li>Local: <code>ws://localhost:8000/profile/AAPL</code></li> </ul>"},{"location":"websockets/profile/#parameters","title":"Parameters","text":"<ul> <li><code>symbol</code> (path parameter) - Stock symbol to monitor (e.g., \"AAPL\", \"GOOGL\", \"TSLA\")</li> </ul>"},{"location":"websockets/profile/#usage-examples","title":"Usage Examples","text":""},{"location":"websockets/profile/#javascript","title":"JavaScript","text":"<pre><code>const socket = new WebSocket('wss://finance-query.onrender.com/profile/AAPL');\n\nsocket.onopen = function (event) {\n    console.log('Connected to profile stream for AAPL');\n};\n\nsocket.onmessage = function (event) {\n    const data = JSON.parse(event.data);\n    console.log('Profile data:', data);\n};\n\nsocket.onclose = function (event) {\n    console.log('Profile stream closed');\n};\n</code></pre>"},{"location":"websockets/profile/#responses","title":"Responses","text":""},{"location":"websockets/profile/#response-format","title":"Response Format","text":"<p>The WebSocket sends JSON responses with the following structure:</p> <pre><code>{\n  \"quote\": {\n    \"symbol\": \"AAPL\",\n    \"name\": \"Apple Inc.\",\n    \"price\": 150.25,\n    \"change\": 2.15,\n    \"percentChange\": 1.45,\n    \"volume\": 45678912,\n    \"marketCap\": 2500000000000,\n    \"pe\": 28.5,\n    \"eps\": 5.26,\n    \"high\": 152.00,\n    \"low\": 148.50,\n    \"open\": 149.00,\n    \"previousClose\": 148.10,\n    \"fiftyTwoWeekHigh\": 180.00,\n    \"fiftyTwoWeekLow\": 120.00\n  },\n  \"similar\": [\n    {\n      \"symbol\": \"MSFT\",\n      \"name\": \"Microsoft Corporation\",\n      \"price\": 340.50,\n      \"change\": -1.25,\n      \"percentChange\": -0.37\n    },\n    {\n      \"symbol\": \"GOOGL\",\n      \"name\": \"Alphabet Inc.\",\n      \"price\": 2650.00,\n      \"change\": 15.30,\n      \"percentChange\": 0.58\n    }\n  ],\n  \"sectorPerformance\": {\n    \"sector\": \"Technology\",\n    \"performance\": 1.25,\n    \"description\": \"Technology sector performance\"\n  },\n  \"news\": [\n    {\n      \"title\": \"Apple Reports Strong Q4 Earnings\",\n      \"url\": \"https://example.com/news/1\",\n      \"publishedAt\": \"2024-01-15T10:30:00Z\",\n      \"source\": \"Financial News\",\n      \"summary\": \"Apple exceeded expectations...\"\n    },\n    {\n      \"title\": \"iPhone Sales Drive Revenue Growth\",\n      \"url\": \"https://example.com/news/2\",\n      \"publishedAt\": \"2024-01-15T09:15:00Z\",\n      \"source\": \"Tech Today\",\n      \"summary\": \"Strong iPhone demand...\"\n    }\n  ]\n}\n</code></pre>"},{"location":"websockets/profile/#response-schema","title":"Response Schema","text":""},{"location":"websockets/profile/#top-level-structure","title":"Top-Level Structure","text":"Field Type Description Required quote object Comprehensive quote data for the symbol \u2713 similar array List of similar stocks with basic quotes \u2713 sectorPerformance object Performance data for the stock's sector \u2713 news array Recent news articles related to the stock \u2713"},{"location":"websockets/profile/#quote-schema","title":"Quote Schema","text":"Field Type Description Required symbol string Stock symbol (e.g., \"AAPL\") \u2713 name string Company name (e.g., \"Apple Inc.\") \u2713 price string Last traded price (e.g., \"145.00\") \u2713 preMarketPrice string Pre-market price (if available) afterHoursPrice string After-hours price (if available) change string Change in price (e.g., \"+1.00\") \u2713 percentChange string Percentage change (e.g., \"+0.69%\") \u2713 open string Opening price of the stock high string Highest price of the trading day low string Lowest price of the trading day yearHigh string 52-week high price yearLow string 52-week low price volume integer Volume traded avgVolume integer Average volume marketCap string Market capitalization beta string Beta of the stock pe string Price-to-earnings ratio eps string Earnings per share dividend string Dividend yield yield string Dividend yield in percentage exDividend string Ex-dividend date netAssets string Net assets (for funds) nav string Net asset value (for funds) expenseRatio string Expense ratio (for funds) category string Fund category (e.g., \"Large Growth\") lastCapitalGain string Last capital gain distribution (for funds) morningstarRating string Morningstar rating (for funds) morningstarRiskRating string Morningstar risk rating (for funds) holdingsTurnover string Holdings turnover (for funds) earningsDate string Next earnings date (if available) lastDividend string Last dividend distribution inceptionDate string Inception date (for funds) sector string Sector of the company industry string Industry of the company about string Company description employees string Number of employees fiveDaysReturn string 5-day return oneMonthReturn string 1-month return threeMonthReturn string 3-month return sixMonthReturn string 6-month return ytdReturn string Year-to-date return yearReturn string 1-year return threeYearReturn string 3-year return fiveYearReturn string 5-year return tenYearReturn string 10-year return maxReturn string All-time maximum return logo string URL to company logo"},{"location":"websockets/profile/#similar-quotes-schema","title":"Similar Quotes Schema","text":"Field Type Description Required symbol string Stock symbol \u2713 name string Company name \u2713 price string Last traded price \u2713 preMarketPrice string Pre-market price (if any) afterHoursPrice string After-hours price (if any) change string Change in price \u2713 percentChange string Percentage change \u2713 logo string URL to company logo"},{"location":"websockets/profile/#sector-performance-schema","title":"Sector Performance Schema","text":"Field Type Description Required sector string Sector name \u2713 dayReturn string 1-day sector return percentage \u2713 ytdReturn string Year-to-date sector return \u2713 yearReturn string 1-year sector return \u2713 threeYearReturn string 3-year sector return \u2713 fiveYearReturn string 5-year sector return \u2713"},{"location":"websockets/profile/#news-item-schema","title":"News Item Schema","text":"Field Type Description Required title string Title of the news article \u2713 link string URL to the full article \u2713 source string News source \u2713 img string URL to accompanying image \u2713 time string Time relative to now \u2713"},{"location":"websockets/profile/#error-handling","title":"Error Handling","text":"<ul> <li>Invalid symbols will still establish connection but may return null quote data</li> <li>Network disconnections trigger automatic cleanup</li> <li>Authentication failures prevent connection establishment</li> </ul>"},{"location":"websockets/profile/#channel-naming","title":"Channel Naming","text":"<ul> <li>Channel: Uses <code>profile:{symbol}</code> format</li> <li>Example: For symbol \"AAPL\", the channel name is <code>profile:AAPL</code></li> </ul>"},{"location":"websockets/quotes/","title":"Quotes WebSocket","text":"<p>The Quotes WebSocket endpoint provides real-time simple quote data for multiple stock symbols simultaneously. This endpoint is optimized for high-performance scenarios where you need basic quote information for many stocks.</p>"},{"location":"websockets/quotes/#use-case","title":"Use Case","text":"<p>Use this endpoint when you need basic quote information for multiple stocks with minimal bandwidth usage. Perfect for:</p> <ul> <li>Stock watchlists</li> <li>Portfolio monitoring</li> <li>Market overview displays</li> <li>Trading dashboards</li> </ul>"},{"location":"websockets/quotes/#connection","title":"Connection","text":""},{"location":"websockets/quotes/#url-format","title":"URL Format","text":"<ul> <li>Production: <code>wss://your-domain.com/quotes</code></li> <li>Local: <code>ws://localhost:8000/quotes</code></li> </ul> <p>Two-Step Connection Required</p> <p>Unlike other WebSocket endpoints, the quotes endpoint requires a two-step connection process:</p> <ol> <li>Establish Connection - Connect to the WebSocket endpoint</li> <li>Send Symbols - Send a comma-separated list of stock symbols</li> </ol>"},{"location":"websockets/quotes/#usage-examples","title":"Usage Examples","text":""},{"location":"websockets/quotes/#javascript","title":"JavaScript","text":"<pre><code>const socket = new WebSocket('wss://finance-query.onrender.com/quotes');\n\nsocket.onopen = function (event) {\n    console.log('Connected to quotes stream');\n\n    // Send the symbols you want to monitor\n    socket.send('AAPL,GOOGL,MSFT,TSLA,AMZN');\n};\n\nsocket.onmessage = function (event) {\n    const quotes = JSON.parse(event.data);\n    console.log('Quotes update:', quotes);\n};\n\nsocket.onclose = function (event) {\n    console.log('Quotes stream closed');\n};\n</code></pre>"},{"location":"websockets/quotes/#symbol-format","title":"Symbol Format","text":""},{"location":"websockets/quotes/#sending-symbols","title":"Sending Symbols","text":"<ul> <li>Format: Comma-separated string</li> <li>Case: Symbols are automatically converted to uppercase</li> <li>Duplicates Symbols are automatically deduplicated</li> </ul>"},{"location":"websockets/quotes/#responses","title":"Responses","text":""},{"location":"websockets/quotes/#response-format","title":"Response Format","text":"<p>The WebSocket sends JSON arrays with simplified quote objects:</p> <pre><code>[\n  {\n    \"symbol\": \"AAPL\",\n    \"name\": \"Apple Inc.\",\n    \"price\": \"150.25\",\n    \"change\": 2.15,\n    \"percentChange\": 1.45,\n    \"preMarketPrice\": \"151.00\",\n    \"afterHoursPrice\": \"149.80\",\n    \"logo\": \"https://example.com/logos/aapl.png\"\n  },\n  {\n    \"symbol\": \"GOOGL\",\n    \"name\": \"Alphabet Inc.\",\n    \"price\": \"2650.00\",\n    \"change\": -15.30,\n    \"percentChange\": -0.57,\n    \"logo\": \"https://example.com/logos/googl.png\"\n  },\n  {\n    \"symbol\": \"MSFT\",\n    \"name\": \"Microsoft Corporation\",\n    \"price\": \"340.50\",\n    \"change\": 5.25,\n    \"percentChange\": 1.56,\n    \"preMarketPrice\": \"341.00\"\n  }\n]\n</code></pre>"},{"location":"websockets/quotes/#response-schema","title":"Response Schema","text":"Field Type Description Required symbol string Stock ticker symbol \u2713 name string Company name \u2713 price string Current stock price \u2713 change number Absolute price change \u2713 percentChange number Percentage change \u2713 preMarketPrice string Pre-market trading price afterHoursPrice string After-hours trading price logo string Company logo URL"},{"location":"websockets/quotes/#error-handling","title":"Error Handling","text":"<ul> <li>Invalid symbols are silently ignored</li> <li>Valid symbols in the list are still processed</li> <li>No error messages for invalid symbols</li> </ul>"},{"location":"websockets/quotes/#channel-naming","title":"Channel Naming","text":"<ul> <li>Channel: Uses the exact symbol list as channel name</li> <li>Example: <code>\"AAPL,GOOGL,MSFT\"</code> becomes channel <code>AAPL,GOOGL,MSFT</code></li> </ul>"}]}